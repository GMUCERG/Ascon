`define BSV_POSITIVE_RESET
`define BSV_NO_INITIAL_BLOCKS
//
// Generated by Bluespec Compiler (build 66e6410)
//
// On Sat Jan 30 14:45:51 CET 2021
//
//
// Ports:
// Name                         I/O  size props
// pdi_ready                      O     1
// sdi_ready                      O     1
// do_data                        O    32 reg
// do_last                        O     1 reg
// do_valid                       O     1
// clk                            I     1 clock
// rst                            I     1 reset
// pdi_data                       I    32 reg
// pdi_valid                      I     1
// sdi_data                       I    32 reg
// sdi_valid                      I     1
// do_ready                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module lwc(clk,
	   rst,

	   pdi_data,

	   pdi_valid,

	   pdi_ready,

	   sdi_data,

	   sdi_valid,

	   sdi_ready,

	   do_data,

	   do_last,

	   do_valid,

	   do_ready);
  input  clk;
  input  rst;

  // action method pdi_data
  input  [31 : 0] pdi_data;

  // action method pdi_valid
  input  pdi_valid;

  // value method pdi_ready
  output pdi_ready;

  // action method sdi_data
  input  [31 : 0] sdi_data;

  // action method sdi_valid
  input  sdi_valid;

  // value method sdi_ready
  output sdi_ready;

  // value method do__data
  output [31 : 0] do_data;

  // value method do__last
  output do_last;

  // value method do__valid
  output do_valid;

  // action method do__ready
  input  do_ready;

  // signals for module outputs
  wire [31 : 0] do_data;
  wire do_last, do_valid, pdi_ready, sdi_ready;

  // inlined wires
  wire [32 : 0] lwc_headersFifo_rv_port1__read,
		lwc_headersFifo_rv_port1__write_1,
		lwc_headersFifo_rv_port2__read,
		lwc_tagFifo_rv_port1__read,
		lwc_tagFifo_rv_port1__write_1,
		lwc_tagFifo_rv_port2__read;
  wire lwc_doSender_fifof_dequeueing_whas,
       lwc_doSender_fifof_enqueueing_whas,
       lwc_doSender_fifof_x_wire_whas,
       lwc_headersFifo_rv_EN_port1__write,
       lwc_pdiReceiver_deq_pw_whas,
       lwc_sdiReceiver_deq_pw_whas;

  // register ascon_asconState
  reg [319 : 0] ascon_asconState;
  wire [319 : 0] ascon_asconState_D_IN;
  wire ascon_asconState_EN;

  // register ascon_bdiValidBytes
  reg [2 : 0] ascon_bdiValidBytes;
  wire [2 : 0] ascon_bdiValidBytes_D_IN;
  wire ascon_bdiValidBytes_EN;

  // register ascon_emitTag
  reg ascon_emitTag;
  wire ascon_emitTag_D_IN, ascon_emitTag_EN;

  // register ascon_finalADStep
  reg ascon_finalADStep;
  wire ascon_finalADStep_D_IN, ascon_finalADStep_EN;

  // register ascon_inEmptyType
  reg ascon_inEmptyType;
  wire ascon_inEmptyType_D_IN, ascon_inEmptyType_EN;

  // register ascon_inLastBlockPadded
  reg ascon_inLastBlockPadded;
  wire ascon_inLastBlockPadded_D_IN, ascon_inLastBlockPadded_EN;

  // register ascon_inLastOfType
  reg ascon_inLastOfType;
  wire ascon_inLastOfType_D_IN, ascon_inLastOfType_EN;

  // register ascon_inPadarg
  reg [1 : 0] ascon_inPadarg;
  wire [1 : 0] ascon_inPadarg_D_IN;
  wire ascon_inPadarg_EN;

  // register ascon_inPaddedBlockZero
  reg ascon_inPaddedBlockZero;
  wire ascon_inPaddedBlockZero_D_IN, ascon_inPaddedBlockZero_EN;

  // register ascon_inRecvType
  reg [3 : 0] ascon_inRecvType;
  wire [3 : 0] ascon_inRecvType_D_IN;
  wire ascon_inRecvType_EN;

  // register ascon_inState
  reg [1 : 0] ascon_inState;
  reg [1 : 0] ascon_inState_D_IN;
  wire ascon_inState_EN;

  // register ascon_initStep
  reg ascon_initStep;
  wire ascon_initStep_D_IN, ascon_initStep_EN;

  // register ascon_keyR
  reg [127 : 0] ascon_keyR;
  wire [127 : 0] ascon_keyR_D_IN;
  wire ascon_keyR_EN;

  // register ascon_outPadarg
  reg [1 : 0] ascon_outPadarg;
  wire [1 : 0] ascon_outPadarg_D_IN;
  wire ascon_outPadarg_EN;

  // register ascon_piso_countReg
  reg [2 : 0] ascon_piso_countReg;
  reg [2 : 0] ascon_piso_countReg_D_IN;
  wire ascon_piso_countReg_EN;

  // register ascon_piso_vec
  reg [127 : 0] ascon_piso_vec;
  reg [127 : 0] ascon_piso_vec_D_IN;
  wire ascon_piso_vec_EN;

  // register ascon_roundCounter
  reg [3 : 0] ascon_roundCounter;
  wire [3 : 0] ascon_roundCounter_D_IN;
  wire ascon_roundCounter_EN;

  // register ascon_sipo_count_reg
  reg [2 : 0] ascon_sipo_count_reg;
  wire [2 : 0] ascon_sipo_count_reg_D_IN;
  wire ascon_sipo_count_reg_EN;

  // register ascon_sipo_vec
  reg [127 : 0] ascon_sipo_vec;
  reg [127 : 0] ascon_sipo_vec_D_IN;
  wire ascon_sipo_vec_EN;

  // register ascon_xState
  reg [1 : 0] ascon_xState;
  reg [1 : 0] ascon_xState_D_IN;
  wire ascon_xState_EN;

  // register lwc_doSender_fifof_cntr_r
  reg [1 : 0] lwc_doSender_fifof_cntr_r;
  wire [1 : 0] lwc_doSender_fifof_cntr_r_D_IN;
  wire lwc_doSender_fifof_cntr_r_EN;

  // register lwc_doSender_fifof_q_0
  reg [32 : 0] lwc_doSender_fifof_q_0;
  reg [32 : 0] lwc_doSender_fifof_q_0_D_IN;
  wire lwc_doSender_fifof_q_0_EN;

  // register lwc_doSender_fifof_q_1
  reg [32 : 0] lwc_doSender_fifof_q_1;
  reg [32 : 0] lwc_doSender_fifof_q_1_D_IN;
  wire lwc_doSender_fifof_q_1_EN;

  // register lwc_finalRemainBytes
  reg [1 : 0] lwc_finalRemainBytes;
  wire [1 : 0] lwc_finalRemainBytes_D_IN;
  wire lwc_finalRemainBytes_EN;

  // register lwc_headersFifo_rv
  reg [32 : 0] lwc_headersFifo_rv;
  wire [32 : 0] lwc_headersFifo_rv_D_IN;
  wire lwc_headersFifo_rv_EN;

  // register lwc_inSegEoT
  reg lwc_inSegEoT;
  wire lwc_inSegEoT_D_IN, lwc_inSegEoT_EN;

  // register lwc_inSegLast
  reg lwc_inSegLast;
  wire lwc_inSegLast_D_IN, lwc_inSegLast_EN;

  // register lwc_inSegType
  reg [3 : 0] lwc_inSegType;
  wire [3 : 0] lwc_inSegType_D_IN;
  wire lwc_inSegType_EN;

  // register lwc_inState
  reg [3 : 0] lwc_inState;
  reg [3 : 0] lwc_inState_D_IN;
  wire lwc_inState_EN;

  // register lwc_inWordCounter
  reg [13 : 0] lwc_inWordCounter;
  reg [13 : 0] lwc_inWordCounter_D_IN;
  wire lwc_inWordCounter_EN;

  // register lwc_outCounter
  reg [13 : 0] lwc_outCounter;
  reg [13 : 0] lwc_outCounter_D_IN;
  wire lwc_outCounter_EN;

  // register lwc_outRemainder
  reg [1 : 0] lwc_outRemainder;
  wire [1 : 0] lwc_outRemainder_D_IN;
  wire lwc_outRemainder_EN;

  // register lwc_outSegLast
  reg lwc_outSegLast;
  wire lwc_outSegLast_D_IN, lwc_outSegLast_EN;

  // register lwc_outSegType
  reg [3 : 0] lwc_outSegType;
  wire [3 : 0] lwc_outSegType_D_IN;
  wire lwc_outSegType_EN;

  // register lwc_outState
  reg [1 : 0] lwc_outState;
  reg [1 : 0] lwc_outState_D_IN;
  wire lwc_outState_EN;

  // register lwc_statFailure
  reg lwc_statFailure;
  wire lwc_statFailure_D_IN, lwc_statFailure_EN;

  // register lwc_tagFifo_rv
  reg [32 : 0] lwc_tagFifo_rv;
  wire [32 : 0] lwc_tagFifo_rv_D_IN;
  wire lwc_tagFifo_rv_EN;

  // ports of submodule lwc_pdiReceiver_fifof
  wire [31 : 0] lwc_pdiReceiver_fifof_D_IN, lwc_pdiReceiver_fifof_D_OUT;
  wire lwc_pdiReceiver_fifof_CLR,
       lwc_pdiReceiver_fifof_DEQ,
       lwc_pdiReceiver_fifof_EMPTY_N,
       lwc_pdiReceiver_fifof_ENQ,
       lwc_pdiReceiver_fifof_FULL_N;

  // ports of submodule lwc_sdiReceiver_fifof
  wire [31 : 0] lwc_sdiReceiver_fifof_D_IN, lwc_sdiReceiver_fifof_D_OUT;
  wire lwc_sdiReceiver_fifof_CLR,
       lwc_sdiReceiver_fifof_DEQ,
       lwc_sdiReceiver_fifof_EMPTY_N,
       lwc_sdiReceiver_fifof_ENQ,
       lwc_sdiReceiver_fifof_FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_ascon_rl_absorb_squeeze,
       WILL_FIRE_RL_ascon_rl_fill_zero,
       WILL_FIRE_RL_ascon_rl_output_tag,
       WILL_FIRE_RL_lwc_doSender_fifof_both,
       WILL_FIRE_RL_lwc_doSender_fifof_decCtr,
       WILL_FIRE_RL_lwc_doSender_fifof_incCtr,
       WILL_FIRE_RL_lwc_rl_enq_tag,
       WILL_FIRE_RL_lwc_rl_feed_core_pdi,
       WILL_FIRE_RL_lwc_rl_feed_core_sdi,
       WILL_FIRE_RL_lwc_rl_get_pdi_hdr,
       WILL_FIRE_RL_lwc_rl_get_sdi_hdr,
       WILL_FIRE_RL_lwc_rl_get_sdi_inst,
       WILL_FIRE_RL_lwc_rl_get_tag_data,
       WILL_FIRE_RL_lwc_rl_get_tag_hdr,
       WILL_FIRE_RL_lwc_rl_out_header,
       WILL_FIRE_RL_lwc_rl_out_status,
       WILL_FIRE_RL_lwc_rl_pdi_instruction,
       WILL_FIRE_RL_lwc_rl_sendout_data,
       WILL_FIRE_RL_lwc_rl_verify_tag;

  // inputs to muxes for submodule ports
  reg [127 : 0] MUX_ascon_piso_vec_write_1__VAL_2;
  reg [32 : 0] MUX_lwc_doSender_fifof_q_0_write_1__VAL_1,
	       MUX_lwc_headersFifo_rv_port1__write_1__VAL_1;
  reg [3 : 0] MUX_ascon_roundCounter_write_1__VAL_1;
  reg [1 : 0] MUX_ascon_inState_write_1__VAL_3;
  wire [319 : 0] MUX_ascon_asconState_write_1__VAL_1,
		 MUX_ascon_asconState_write_1__VAL_2;
  wire [127 : 0] MUX_ascon_piso_vec_write_1__VAL_1,
		 MUX_ascon_sipo_vec_write_1__VAL_1,
		 MUX_ascon_sipo_vec_write_1__VAL_2,
		 MUX_ascon_sipo_vec_write_1__VAL_3;
  wire [32 : 0] MUX_lwc_doSender_fifof_q_0_write_1__VAL_2,
		MUX_lwc_doSender_fifof_q_1_write_1__VAL_2,
		MUX_lwc_doSender_fifof_q_1_write_1__VAL_3,
		MUX_lwc_doSender_fifof_x_wire_wset_1__VAL_1,
		MUX_lwc_doSender_fifof_x_wire_wset_1__VAL_2,
		MUX_lwc_doSender_fifof_x_wire_wset_1__VAL_3;
  wire [13 : 0] MUX_lwc_inWordCounter_write_1__VAL_1,
		MUX_lwc_outCounter_write_1__VAL_1,
		MUX_lwc_outCounter_write_1__VAL_2;
  wire [3 : 0] MUX_ascon_roundCounter_write_1__VAL_2,
	       MUX_lwc_inState_write_1__VAL_2,
	       MUX_lwc_inState_write_1__VAL_3,
	       MUX_lwc_inState_write_1__VAL_5;
  wire [2 : 0] MUX_ascon_piso_countReg_write_1__VAL_2,
	       MUX_ascon_sipo_count_reg_write_1__VAL_1;
  wire [1 : 0] MUX_ascon_inState_write_1__VAL_2,
	       MUX_ascon_inState_write_1__VAL_4,
	       MUX_ascon_inState_write_1__VAL_5,
	       MUX_ascon_xState_write_1__VAL_1,
	       MUX_lwc_doSender_fifof_cntr_r_write_1__VAL_2,
	       MUX_lwc_outState_write_1__VAL_2,
	       MUX_lwc_outState_write_1__VAL_3;
  wire MUX_ascon_emitTag_write_1__SEL_1,
       MUX_ascon_emitTag_write_1__VAL_1,
       MUX_ascon_finalADStep_write_1__SEL_1,
       MUX_ascon_inLastBlockPadded_write_1__SEL_1,
       MUX_ascon_inLastBlockPadded_write_1__VAL_2,
       MUX_ascon_inPaddedBlockZero_write_1__VAL_1,
       MUX_ascon_inState_write_1__PSEL_2,
       MUX_ascon_inState_write_1__SEL_1,
       MUX_ascon_inState_write_1__SEL_2,
       MUX_ascon_initStep_write_1__SEL_1,
       MUX_ascon_outPadarg_write_1__SEL_1,
       MUX_ascon_piso_countReg_write_1__SEL_2,
       MUX_ascon_roundCounter_write_1__SEL_1,
       MUX_ascon_sipo_count_reg_write_1__SEL_1,
       MUX_ascon_xState_write_1__SEL_1,
       MUX_lwc_doSender_fifof_q_0_write_1__SEL_1,
       MUX_lwc_doSender_fifof_q_0_write_1__SEL_2,
       MUX_lwc_doSender_fifof_q_1_write_1__SEL_1,
       MUX_lwc_doSender_fifof_q_1_write_1__SEL_2,
       MUX_lwc_headersFifo_rv_port1__write_1__SEL_1,
       MUX_lwc_inState_write_1__SEL_1,
       MUX_lwc_inState_write_1__SEL_2,
       MUX_lwc_inState_write_1__SEL_3,
       MUX_lwc_inState_write_1__SEL_4,
       MUX_lwc_inWordCounter_write_1__SEL_1,
       MUX_lwc_inWordCounter_write_1__SEL_3,
       MUX_lwc_outCounter_write_1__SEL_1,
       MUX_lwc_outCounter_write_1__SEL_2,
       MUX_lwc_outState_write_1__SEL_1,
       MUX_lwc_outState_write_1__SEL_2,
       MUX_lwc_outState_write_1__SEL_3,
       MUX_lwc_statFailure_write_1__SEL_1;

  // remaining internal signals
  reg [191 : 0] IF_ascon_inRecvType_2_EQ_12_4_THEN_ascon_ascon_ETC___d194;
  reg [63 : 0] CASE_ascon_inRecvType_4_x1_avValue_fst_x2848_5_ETC__q3,
	       CASE_ascon_inRecvType_4_x1_avValue_fst_x3849_5_ETC__q4,
	       IF_IF_ascon_inRecvType_2_EQ_13_3_OR_ascon_inRe_ETC___d126,
	       IF_IF_ascon_inRecvType_2_EQ_13_3_OR_ascon_inRe_ETC___d166,
	       IF_ascon_inRecvType_2_EQ_13_3_THEN_ascon_keyR__ETC___d132,
	       x1_avValue_fst_x0__h2854,
	       x1_avValue_fst_x1__h2855,
	       x__h3300,
	       x__h3854;
  reg [31 : 0] IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d103,
	       IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d119,
	       IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d146,
	       IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d161,
	       IF_ascon_outPadarg_18_EQ_0_19_THEN_ascon_piso__ETC___d630,
	       IF_lwc_finalRemainBytes_98_EQ_0_06_THEN_lwc_pd_ETC___d548,
	       IF_lwc_finalRemainBytes_98_EQ_0_06_THEN_lwc_sd_ETC___d520;
  reg [7 : 0] CASE_ascon_roundCounter_00_MINUS_1_14_0_0x4B_1_ETC__q1,
	      CASE_x303_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2;
  reg [2 : 0] IF_ascon_inRecvType_2_EQ_13_3_OR_ascon_inRecvT_ETC___d81;
  reg CASE_lwc_pdiReceiver_fifofD_OUT_BITS_31_TO_28_ETC__q6;
  wire [191 : 0] IF_ascon_inRecvType_2_EQ_5_6_OR_ascon_inRecvTy_ETC___d191;
  wire [127 : 0] IF_ascon_finalADStep_04_THEN_ascon_asconState__ETC___d360,
		 IF_ascon_inEmptyType_1_THEN_ascon_asconState_5_ETC___d67,
		 IF_ascon_initStep_05_THEN_ascon_asconState_5_B_ETC___d361,
		 IF_ascon_roundCounter_00_EQ_2_01_AND_NOT_ascon_ETC___d363,
		 IF_ascon_roundCounter_00_EQ_2_01_THEN_IF_ascon_ETC___d362;
  wire [63 : 0] INV_ascon_asconState_5_BITS_191_TO_136_11_CONC_ETC___d267,
		newState___1_x2__h2826,
		newState___1_x3__h2827,
		newState___2_x0__h3356,
		newState___2_x0__h3567,
		newState_x0__h1829,
		newState_x1__h1830,
		newState_x4__h1575,
		state_x0__h12133,
		state_x0__h12196,
		state_x0__h12268,
		state_x1__h12144,
		state_x1__h12279,
		state_x2__h12130,
		state_x2__h12188,
		state_x2__h12265,
		state_x2__h12323,
		state_x3__h12074,
		state_x3__h12141,
		state_x3__h12194,
		state_x3__h5486,
		state_x4__h12061,
		state_x4__h12137,
		state_x4__h5405,
		state_x4__h5482,
		t0__h12113,
		t0__h5458,
		t1__h12114,
		x1_avValue_fst_x2__h2838,
		x1_avValue_fst_x2__h2843,
		x1_avValue_fst_x2__h2848,
		x1_avValue_fst_x3__h2839,
		x1_avValue_fst_x3__h2844,
		x1_avValue_fst_x3__h2849,
		x1_avValue_x0__h1842,
		x1_avValue_x1__h1843,
		x1_avValue_x4__h1846,
		x__h11858,
		x__h12048,
		x__h12107,
		x__h12242,
		x__h12462,
		x__h12647,
		x__h12661,
		x__h12676,
		x__h12679,
		x__h12804,
		x__h12822,
		x__h13000,
		x__h13013,
		x__h13030,
		x__h13116,
		x__h13117,
		x__h13203,
		x__h13215,
		x__h13230,
		x__h13233,
		x__h13319,
		x__h13331,
		x__h13346,
		x__h13349,
		x__h13435,
		x__h13447,
		x__h13462,
		x__h13464,
		x__h13571,
		x__h13585,
		x__h5546,
		x__h5802,
		x__h5804,
		x__h5904,
		x__h6162,
		x__h6371,
		y__h11880,
		y__h12108,
		y__h12180,
		y__h12243,
		y__h12315,
		y__h12337,
		y__h12463,
		y__h12648,
		y__h12662,
		y__h12675,
		y__h12680,
		y__h12805,
		y__h12823,
		y__h13001,
		y__h13014,
		y__h13031,
		y__h13118,
		y__h13216,
		y__h13229,
		y__h13234,
		y__h13332,
		y__h13345,
		y__h13350,
		y__h13448,
		y__h13461,
		y__h13465,
		y__h13586,
		y__h5803,
		y__h5903,
		y__h5905,
		y__h6161,
		y__h6370;
  wire [31 : 0] b__h19207,
		b__h19214,
		b__h19217,
		b__h20163,
		b__h20170,
		b__h20173,
		b__h22315,
		b__h22322,
		b__h22325,
		lwc_headersFifo_rv_BITS_31_TO_0__q5,
		x__h22291;
  wire [13 : 0] x__h22448;
  wire [7 : 0] spliced_bits__h12341, spliced_bits__h12767;
  wire [3 : 0] IF_ascon_inEmptyType_1_THEN_12_ELSE_IF_ascon_i_ETC___d37,
	       IF_lwc_inSegType_51_EQ_5_54_AND_lwc_inSegEoT_0_ETC___d558,
	       ascon_roundCounter_00_MINUS_1___d214,
	       x__h6303;
  wire [2 : 0] IF_ascon_inEmptyType_1_THEN_0_ELSE_IF_ascon_in_ETC___d79,
	       IF_ascon_inLastBlockPadded_3_THEN_IF_ascon_inP_ETC___d77;
  wire [1 : 0] IF_ascon_inEmptyType_1_THEN_0_ELSE_IF_ascon_in_ETC___d26,
	       lwc_doSender_fifof_cntr_r_10_MINUS_1___d419;
  wire NOT_IF_lwc_tagFifo_rv_port0__read__96_BIT_32_9_ETC___d610,
       NOT_ascon_roundCounter_00_EQ_2_01_66_OR_NOT_as_ETC___d367,
       NOT_lwc_outCounter_05_BITS_13_TO_1_11_EQ_0_12__ETC___d644,
       _dand2ascon_inState_EN_write,
       _dfoo1,
       _dfoo3,
       ascon_inRecvType_2_EQ_1_8_AND_NOT_ascon_inEmpt_ETC___d44,
       ascon_inRecvType_2_EQ_1_8_AND_ascon_inEmptyTyp_ETC___d49,
       ascon_inRecvType_2_EQ_4_7_AND_NOT_ascon_inEmpt_ETC___d43,
       ascon_inRecvType_2_EQ_5_6_AND_NOT_ascon_inEmpt_ETC___d42,
       ascon_roundCounter_00_EQ_2_01_AND_ascon_emitTa_ETC___d373,
       lwc_inWordCounter_96_BITS_13_TO_1_99_EQ_0_00_A_ETC___d509;

  // value method pdi_ready
  assign pdi_ready =
	     lwc_pdiReceiver_fifof_FULL_N || lwc_pdiReceiver_deq_pw_whas ;

  // value method sdi_ready
  assign sdi_ready =
	     lwc_sdiReceiver_fifof_FULL_N || lwc_sdiReceiver_deq_pw_whas ;

  // value method do__data
  assign do_data = lwc_doSender_fifof_q_0[31:0] ;

  // value method do__last
  assign do_last = lwc_doSender_fifof_q_0[32] ;

  // value method do__valid
  assign do_valid = lwc_doSender_fifof_cntr_r != 2'd0 ;

  // submodule lwc_pdiReceiver_fifof
  FIFOL1 #(.width(32'd32)) lwc_pdiReceiver_fifof(.RST(rst),
						 .CLK(clk),
						 .D_IN(lwc_pdiReceiver_fifof_D_IN),
						 .ENQ(lwc_pdiReceiver_fifof_ENQ),
						 .DEQ(lwc_pdiReceiver_fifof_DEQ),
						 .CLR(lwc_pdiReceiver_fifof_CLR),
						 .D_OUT(lwc_pdiReceiver_fifof_D_OUT),
						 .FULL_N(lwc_pdiReceiver_fifof_FULL_N),
						 .EMPTY_N(lwc_pdiReceiver_fifof_EMPTY_N));

  // submodule lwc_sdiReceiver_fifof
  FIFOL1 #(.width(32'd32)) lwc_sdiReceiver_fifof(.RST(rst),
						 .CLK(clk),
						 .D_IN(lwc_sdiReceiver_fifof_D_IN),
						 .ENQ(lwc_sdiReceiver_fifof_ENQ),
						 .DEQ(lwc_sdiReceiver_fifof_DEQ),
						 .CLR(lwc_sdiReceiver_fifof_CLR),
						 .D_OUT(lwc_sdiReceiver_fifof_D_OUT),
						 .FULL_N(lwc_sdiReceiver_fifof_FULL_N),
						 .EMPTY_N(lwc_sdiReceiver_fifof_EMPTY_N));

  // rule RL_ascon_rl_absorb_squeeze
  assign WILL_FIRE_RL_ascon_rl_absorb_squeeze =
	     ascon_sipo_count_reg == 3'd4 && ascon_piso_countReg == 3'd0 &&
	     ascon_inState == 2'd3 &&
	     ascon_xState == 2'd0 ;

  // rule RL_ascon_rl_output_tag
  assign WILL_FIRE_RL_ascon_rl_output_tag =
	     ascon_piso_countReg == 3'd0 && ascon_xState == 2'd2 ;

  // rule RL_ascon_rl_fill_zero
  assign WILL_FIRE_RL_ascon_rl_fill_zero =
	     ascon_sipo_count_reg != 3'd4 && ascon_inState == 2'd2 ;

  // rule RL_lwc_rl_pdi_instruction
  assign WILL_FIRE_RL_lwc_rl_pdi_instruction =
	     lwc_inState == 4'd0 && lwc_pdiReceiver_fifof_EMPTY_N ;

  // rule RL_lwc_rl_get_sdi_inst
  assign WILL_FIRE_RL_lwc_rl_get_sdi_inst =
	     lwc_inState == 4'd1 && lwc_sdiReceiver_fifof_EMPTY_N ;

  // rule RL_lwc_rl_get_sdi_hdr
  assign WILL_FIRE_RL_lwc_rl_get_sdi_hdr =
	     ascon_inState == 2'd0 && lwc_inState == 4'd3 &&
	     lwc_sdiReceiver_fifof_EMPTY_N ;

  // rule RL_lwc_rl_get_tag_hdr
  assign WILL_FIRE_RL_lwc_rl_get_tag_hdr =
	     lwc_inState == 4'd5 && lwc_pdiReceiver_fifof_EMPTY_N ;

  // rule RL_lwc_rl_out_header
  assign WILL_FIRE_RL_lwc_rl_out_header =
	     lwc_doSender_fifof_cntr_r != 2'd2 && lwc_outState == 2'd0 &&
	     lwc_headersFifo_rv[32] ;

  // rule RL_lwc_rl_get_pdi_hdr
  assign WILL_FIRE_RL_lwc_rl_get_pdi_hdr =
	     ascon_inState == 2'd0 && lwc_inState == 4'd2 &&
	     lwc_pdiReceiver_fifof_EMPTY_N &&
	     CASE_lwc_pdiReceiver_fifofD_OUT_BITS_31_TO_28_ETC__q6 ;

  // rule RL_lwc_rl_enq_tag
  assign WILL_FIRE_RL_lwc_rl_enq_tag =
	     lwc_inState == 4'd7 && !lwc_headersFifo_rv_port1__read[32] ;

  // rule RL_lwc_rl_verify_tag
  assign WILL_FIRE_RL_lwc_rl_verify_tag =
	     ascon_piso_countReg != 3'd0 && lwc_outState == 2'd2 &&
	     lwc_tagFifo_rv[32] ;

  // rule RL_lwc_rl_get_tag_data
  assign WILL_FIRE_RL_lwc_rl_get_tag_data =
	     lwc_inState == 4'd6 && !lwc_tagFifo_rv_port1__read[32] &&
	     lwc_pdiReceiver_fifof_EMPTY_N ;

  // rule RL_lwc_rl_sendout_data
  assign WILL_FIRE_RL_lwc_rl_sendout_data =
	     lwc_doSender_fifof_cntr_r != 2'd2 &&
	     ascon_piso_countReg != 3'd0 &&
	     lwc_outState == 2'd1 ;

  // rule RL_lwc_rl_feed_core_sdi
  assign WILL_FIRE_RL_lwc_rl_feed_core_sdi =
	     ascon_sipo_count_reg != 3'd4 && ascon_inState == 2'd1 &&
	     lwc_inState == 4'd8 &&
	     lwc_sdiReceiver_fifof_EMPTY_N ;

  // rule RL_lwc_rl_feed_core_pdi
  assign WILL_FIRE_RL_lwc_rl_feed_core_pdi =
	     ascon_sipo_count_reg != 3'd4 && ascon_inState == 2'd1 &&
	     lwc_inState == 4'd4 &&
	     lwc_pdiReceiver_fifof_EMPTY_N ;

  // rule RL_lwc_rl_out_status
  assign WILL_FIRE_RL_lwc_rl_out_status =
	     lwc_doSender_fifof_cntr_r != 2'd2 && lwc_outState == 2'd3 ;

  // rule RL_lwc_doSender_fifof_incCtr
  assign WILL_FIRE_RL_lwc_doSender_fifof_incCtr =
	     lwc_doSender_fifof_enqueueing_whas &&
	     !lwc_doSender_fifof_dequeueing_whas &&
	     lwc_doSender_fifof_x_wire_whas ;

  // rule RL_lwc_doSender_fifof_decCtr
  assign WILL_FIRE_RL_lwc_doSender_fifof_decCtr =
	     !lwc_doSender_fifof_enqueueing_whas &&
	     lwc_doSender_fifof_dequeueing_whas ;

  // rule RL_lwc_doSender_fifof_both
  assign WILL_FIRE_RL_lwc_doSender_fifof_both =
	     lwc_doSender_fifof_enqueueing_whas &&
	     lwc_doSender_fifof_dequeueing_whas &&
	     lwc_doSender_fifof_x_wire_whas ;

  // inputs to muxes for submodule ports
  assign MUX_ascon_emitTag_write_1__SEL_1 =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     (ascon_inRecvType == 4'd5 || ascon_inRecvType == 4'd4) ;
  assign MUX_ascon_finalADStep_write_1__SEL_1 =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     ascon_inRecvType_2_EQ_1_8_AND_ascon_inEmptyTyp_ETC___d49 ;
  assign MUX_ascon_inLastBlockPadded_write_1__SEL_1 =
	     WILL_FIRE_RL_ascon_rl_fill_zero &&
	     (ascon_sipo_count_reg == 3'd0 ||
	      !ascon_inLastBlockPadded && ascon_inLastOfType) ;
  assign MUX_ascon_inState_write_1__SEL_1 =
	     WILL_FIRE_RL_ascon_rl_fill_zero && ascon_sipo_count_reg[1] &&
	     ascon_sipo_count_reg[0] ;
  assign MUX_ascon_inState_write_1__PSEL_2 =
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi ||
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi ;
  assign MUX_ascon_inState_write_1__SEL_2 =
	     MUX_ascon_inState_write_1__PSEL_2 &&
	     (ascon_sipo_count_reg[1] && ascon_sipo_count_reg[0] ||
	      lwc_inWordCounter_96_BITS_13_TO_1_99_EQ_0_00_A_ETC___d509) ;
  assign MUX_ascon_initStep_write_1__SEL_1 =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     ascon_inRecvType == 4'd13 ;
  assign MUX_ascon_outPadarg_write_1__SEL_1 =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     (ascon_inRecvType_2_EQ_5_6_AND_NOT_ascon_inEmpt_ETC___d42 ||
	      ascon_inRecvType_2_EQ_4_7_AND_NOT_ascon_inEmpt_ETC___d43) ;
  assign MUX_ascon_piso_countReg_write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_rl_sendout_data ||
	     WILL_FIRE_RL_lwc_rl_verify_tag ;
  assign MUX_ascon_roundCounter_write_1__SEL_1 =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     (ascon_inRecvType == 4'd13 || ascon_inRecvType == 4'd5 ||
	      ascon_inRecvType == 4'd4 ||
	      ascon_inRecvType == 4'd1 && !ascon_inEmptyType) ;
  assign MUX_ascon_sipo_count_reg_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi ||
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi ||
	     WILL_FIRE_RL_ascon_rl_fill_zero ;
  assign MUX_ascon_xState_write_1__SEL_1 =
	     ascon_xState == 2'd1 && ascon_roundCounter == 4'd2 ;
  assign MUX_lwc_doSender_fifof_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_doSender_fifof_incCtr &&
	     lwc_doSender_fifof_cntr_r == 2'd0 ;
  assign MUX_lwc_doSender_fifof_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_doSender_fifof_both && _dfoo3 ;
  assign MUX_lwc_doSender_fifof_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_doSender_fifof_incCtr &&
	     lwc_doSender_fifof_cntr_r == 2'd1 ;
  assign MUX_lwc_doSender_fifof_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_doSender_fifof_both && _dfoo1 ;
  assign MUX_lwc_headersFifo_rv_port1__write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr &&
	     (lwc_pdiReceiver_fifof_D_OUT[31:28] == 4'd5 ||
	      lwc_pdiReceiver_fifof_D_OUT[31:28] == 4'd4 ||
	      lwc_pdiReceiver_fifof_D_OUT[31:28] == 4'd7 &&
	      lwc_pdiReceiver_fifof_D_OUT[24]) ;
  assign MUX_lwc_inState_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_rl_get_tag_data &&
	     lwc_inWordCounter[13:1] == 13'd0 ;
  assign MUX_lwc_inState_write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr &&
	     (lwc_pdiReceiver_fifof_D_OUT[15:0] != 16'd0 ||
	      lwc_pdiReceiver_fifof_D_OUT[24] ||
	      lwc_pdiReceiver_fifof_D_OUT[31:28] == 4'd5 &&
	      lwc_pdiReceiver_fifof_D_OUT[25]) ;
  assign MUX_lwc_inState_write_1__SEL_3 =
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi &&
	     (lwc_inWordCounter[13:1] == 13'd0 && !lwc_inWordCounter[0] ||
	      lwc_finalRemainBytes == 2'd0 &&
	      lwc_inWordCounter[13:1] == 13'd0) ;
  assign MUX_lwc_inState_write_1__SEL_4 =
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi &&
	     (lwc_inWordCounter[13:1] == 13'd0 && !lwc_inWordCounter[0] ||
	      lwc_finalRemainBytes == 2'd0 &&
	      lwc_inWordCounter[13:1] == 13'd0) ;
  assign MUX_lwc_inWordCounter_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_rl_get_tag_data ||
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi ||
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi ;
  assign MUX_lwc_inWordCounter_write_1__SEL_3 =
	     WILL_FIRE_RL_lwc_rl_get_tag_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ;
  assign MUX_lwc_outCounter_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_rl_out_header &&
	     (lwc_headersFifo_rv_BITS_31_TO_0__q5[15:0] != 16'd0 ||
	      lwc_headersFifo_rv_BITS_31_TO_0__q5[31:28] == 4'd4) ;
  assign MUX_lwc_outCounter_write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_rl_sendout_data &&
	     NOT_lwc_outCounter_05_BITS_13_TO_1_11_EQ_0_12__ETC___d644 ;
  assign MUX_lwc_outState_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_rl_verify_tag && lwc_outCounter[13:1] == 13'd0 ;
  assign MUX_lwc_outState_write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_rl_sendout_data &&
	     (lwc_outCounter[13:1] == 13'd0 && !lwc_outCounter[0] ||
	      lwc_outRemainder == 2'd0 && lwc_outCounter[13:1] == 13'd0) ;
  assign MUX_lwc_outState_write_1__SEL_3 =
	     WILL_FIRE_RL_lwc_rl_out_header &&
	     (lwc_headersFifo_rv_BITS_31_TO_0__q5[15:0] != 16'd0 ||
	      lwc_headersFifo_rv_BITS_31_TO_0__q5[24] ||
	      lwc_headersFifo_rv_BITS_31_TO_0__q5[31:28] == 4'd4) ;
  assign MUX_lwc_statFailure_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_rl_verify_tag &&
	     NOT_IF_lwc_tagFifo_rv_port0__read__96_BIT_32_9_ETC___d610 ;
  assign MUX_ascon_asconState_write_1__VAL_1 =
	     { x__h3300,
	       x__h3854,
	       IF_ascon_inRecvType_2_EQ_12_4_THEN_ascon_ascon_ETC___d194 } ;
  assign MUX_ascon_asconState_write_1__VAL_2 =
	     { x__h12048,
	       x__h13203,
	       x__h13319,
	       IF_ascon_roundCounter_00_EQ_2_01_AND_NOT_ascon_ETC___d363 } ;
  assign MUX_ascon_emitTag_write_1__VAL_1 =
	     ascon_inEmptyType ||
	     ascon_inLastOfType && ascon_inLastBlockPadded ;
  assign MUX_ascon_inLastBlockPadded_write_1__VAL_2 =
	     lwc_finalRemainBytes != 2'd0 &&
	     lwc_inWordCounter[13:1] == 13'd0 &&
	     !lwc_inWordCounter[0] &&
	     lwc_inSegEoT ;
  assign MUX_ascon_inPaddedBlockZero_write_1__VAL_1 =
	     !ascon_inEmptyType && ascon_sipo_count_reg == 3'd0 ;
  assign MUX_ascon_inState_write_1__VAL_2 =
	     (ascon_sipo_count_reg[1] && ascon_sipo_count_reg[0]) ?
	       2'd3 :
	       2'd2 ;
  always @*
	 begin
	   case (ascon_inRecvType)
	     4'd1, 4'd4, 4'd5:
		 MUX_ascon_inState_write_1__VAL_3 =
		     IF_ascon_inEmptyType_1_THEN_0_ELSE_IF_ascon_in_ETC___d26;
	     4'd12, 4'd13: MUX_ascon_inState_write_1__VAL_3 = 2'd0;
	     default: MUX_ascon_inState_write_1__VAL_3 = 2'd0;
	   endcase
	 end
  assign MUX_ascon_inState_write_1__VAL_4 =
	     (lwc_sdiReceiver_fifof_D_OUT[15:0] == 16'd0) ? 2'd2 : 2'd1 ;
  assign MUX_ascon_inState_write_1__VAL_5 =
	     (lwc_pdiReceiver_fifof_D_OUT[15:0] == 16'd0) ? 2'd2 : 2'd1 ;
  assign MUX_ascon_piso_countReg_write_1__VAL_2 = ascon_piso_countReg - 3'd1 ;
  assign MUX_ascon_piso_vec_write_1__VAL_1 =
	     { ascon_piso_vec[95:0], ascon_piso_vec[127:96] } ;
  always @*
	 begin
	   case (ascon_inRecvType)
	     4'd1:
		 MUX_ascon_piso_vec_write_1__VAL_2 =
		     IF_ascon_inEmptyType_1_THEN_ascon_asconState_5_ETC___d67;
	     4'd4, 4'd5:
		 MUX_ascon_piso_vec_write_1__VAL_2 =
		     { newState_x0__h1829, newState_x1__h1830 };
	     4'd12:
		 MUX_ascon_piso_vec_write_1__VAL_2 =
		     ascon_asconState[319:192];
	     4'd13:
		 MUX_ascon_piso_vec_write_1__VAL_2 =
		     { 64'h80800C0800000000, ascon_keyR[127:64] };
	     default: MUX_ascon_piso_vec_write_1__VAL_2 =
			  ascon_asconState[319:192];
	   endcase
	 end
  always @*
	 begin
	   case (ascon_inRecvType)
	     4'd1: MUX_ascon_roundCounter_write_1__VAL_1 = 4'd8;
	     4'd13: MUX_ascon_roundCounter_write_1__VAL_1 = 4'd12;
	     default: MUX_ascon_roundCounter_write_1__VAL_1 =
			  IF_ascon_inEmptyType_1_THEN_12_ELSE_IF_ascon_i_ETC___d37;
	   endcase
	 end
  assign MUX_ascon_roundCounter_write_1__VAL_2 = ascon_roundCounter - 4'd2 ;
  assign MUX_ascon_sipo_count_reg_write_1__VAL_1 =
	     ascon_sipo_count_reg + 3'd1 ;
  assign MUX_ascon_sipo_vec_write_1__VAL_1 =
	     (ascon_sipo_count_reg == 3'd0 ||
	      !ascon_inLastBlockPadded && ascon_inLastOfType) ?
	       { ascon_sipo_vec[95:0], 32'h80000000 } :
	       { ascon_sipo_vec[95:0], 32'd0 } ;
  assign MUX_ascon_sipo_vec_write_1__VAL_2 =
	     { ascon_sipo_vec[95:0],
	       lwc_inWordCounter_96_BITS_13_TO_1_99_EQ_0_00_A_ETC___d509 ?
		 IF_lwc_finalRemainBytes_98_EQ_0_06_THEN_lwc_sd_ETC___d520 :
		 lwc_sdiReceiver_fifof_D_OUT } ;
  assign MUX_ascon_sipo_vec_write_1__VAL_3 =
	     { ascon_sipo_vec[95:0],
	       lwc_inWordCounter_96_BITS_13_TO_1_99_EQ_0_00_A_ETC___d509 ?
		 IF_lwc_finalRemainBytes_98_EQ_0_06_THEN_lwc_pd_ETC___d548 :
		 lwc_pdiReceiver_fifof_D_OUT } ;
  assign MUX_ascon_xState_write_1__VAL_1 =
	     (!ascon_emitTag || ascon_finalADStep || ascon_initStep) ?
	       2'd0 :
	       2'd2 ;
  assign MUX_lwc_doSender_fifof_cntr_r_write_1__VAL_2 =
	     lwc_doSender_fifof_cntr_r + 2'd1 ;
  always @*
	 begin
	   (* parallel_case *) case (1'b1)
	     WILL_FIRE_RL_lwc_rl_out_header:
		 MUX_lwc_doSender_fifof_q_0_write_1__VAL_1 =
		     MUX_lwc_doSender_fifof_x_wire_wset_1__VAL_1;
	     WILL_FIRE_RL_lwc_rl_sendout_data:
		 MUX_lwc_doSender_fifof_q_0_write_1__VAL_1 =
		     MUX_lwc_doSender_fifof_x_wire_wset_1__VAL_2;
	     WILL_FIRE_RL_lwc_rl_out_status:
		 MUX_lwc_doSender_fifof_q_0_write_1__VAL_1 =
		     MUX_lwc_doSender_fifof_x_wire_wset_1__VAL_3;
	     default: MUX_lwc_doSender_fifof_q_0_write_1__VAL_1 =
			  33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	   endcase
	 end
  assign MUX_lwc_doSender_fifof_q_0_write_1__VAL_2 =
	     (lwc_doSender_fifof_cntr_r == 2'd1) ?
	       MUX_lwc_doSender_fifof_q_0_write_1__VAL_1 :
	       lwc_doSender_fifof_q_1 ;
  assign MUX_lwc_doSender_fifof_q_1_write_1__VAL_2 =
	     (lwc_doSender_fifof_cntr_r == 2'd2) ?
	       MUX_lwc_doSender_fifof_q_0_write_1__VAL_1 :
	       { 1'd0,
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_lwc_doSender_fifof_q_1_write_1__VAL_3 =
	     { 1'd0,
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_lwc_doSender_fifof_x_wire_wset_1__VAL_1 =
	     { 1'd0, lwc_headersFifo_rv[31:0] } ;
  assign MUX_lwc_doSender_fifof_x_wire_wset_1__VAL_2 = { 1'd0, x__h22291 } ;
  assign MUX_lwc_doSender_fifof_x_wire_wset_1__VAL_3 =
	     { 4'd15, lwc_statFailure, 28'b0 } ;
  always @*
	 begin
	   case (lwc_pdiReceiver_fifof_D_OUT[31:28])
	     4'd4:
		 MUX_lwc_headersFifo_rv_port1__write_1__VAL_1 =
		     { 7'd84,
		       lwc_pdiReceiver_fifof_D_OUT[25],
		       9'd0,
		       lwc_pdiReceiver_fifof_D_OUT[15:0] };
	     4'd5:
		 MUX_lwc_headersFifo_rv_port1__write_1__VAL_1 =
		     { 7'd80,
		       lwc_pdiReceiver_fifof_D_OUT[25],
		       9'd256,
		       lwc_pdiReceiver_fifof_D_OUT[15:0] };
	     default: MUX_lwc_headersFifo_rv_port1__write_1__VAL_1 =
			  33'h193000020;
	   endcase
	 end
  assign MUX_lwc_inState_write_1__VAL_2 =
	     (lwc_pdiReceiver_fifof_D_OUT[15:0] == 16'd0) ?
	       ((lwc_pdiReceiver_fifof_D_OUT[31:28] == 4'd5 &&
		 lwc_pdiReceiver_fifof_D_OUT[25]) ?
		  4'd5 :
		  ((lwc_pdiReceiver_fifof_D_OUT[31:28] == 4'd4) ?
		     4'd7 :
		     4'd0)) :
	       4'd4 ;
  assign MUX_lwc_inState_write_1__VAL_3 =
	     (lwc_inSegType == 4'd4 && lwc_inSegEoT) ?
	       4'd7 :
	       IF_lwc_inSegType_51_EQ_5_54_AND_lwc_inSegEoT_0_ETC___d558 ;
  assign MUX_lwc_inState_write_1__VAL_5 =
	     lwc_pdiReceiver_fifof_D_OUT[30] ? 4'd1 : 4'd2 ;
  assign MUX_lwc_inWordCounter_write_1__VAL_1 = lwc_inWordCounter - 14'd1 ;
  assign MUX_lwc_outCounter_write_1__VAL_1 =
	     (lwc_headersFifo_rv_BITS_31_TO_0__q5[15:0] == 16'd0) ?
	       14'd4 :
	       lwc_headersFifo_rv_BITS_31_TO_0__q5[15:2] ;
  assign MUX_lwc_outCounter_write_1__VAL_2 =
	     (lwc_outCounter[13:1] == 13'd0 && !lwc_outCounter[0] ||
	      lwc_outRemainder == 2'd0 && lwc_outCounter[13:1] == 13'd0) ?
	       14'd4 :
	       x__h22448 ;
  assign MUX_lwc_outState_write_1__VAL_2 =
	     lwc_outSegLast ?
	       ((lwc_outSegType == 4'd4) ? 2'd2 : 2'd3) :
	       2'd0 ;
  assign MUX_lwc_outState_write_1__VAL_3 =
	     (lwc_headersFifo_rv_BITS_31_TO_0__q5[15:0] == 16'd0) ?
	       ((lwc_headersFifo_rv_BITS_31_TO_0__q5[31:28] == 4'd4) ?
		  2'd2 :
		  2'd3) :
	       2'd1 ;

  // inlined wires
  assign lwc_doSender_fifof_x_wire_whas =
	     WILL_FIRE_RL_lwc_rl_out_header ||
	     WILL_FIRE_RL_lwc_rl_sendout_data ||
	     WILL_FIRE_RL_lwc_rl_out_status ;
  assign lwc_pdiReceiver_deq_pw_whas =
	     WILL_FIRE_RL_lwc_rl_get_tag_data ||
	     WILL_FIRE_RL_lwc_rl_get_tag_hdr ||
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi ||
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_pdi_instruction ;
  assign lwc_sdiReceiver_deq_pw_whas =
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_inst ;
  assign lwc_doSender_fifof_enqueueing_whas =
	     WILL_FIRE_RL_lwc_rl_out_status ||
	     WILL_FIRE_RL_lwc_rl_sendout_data ||
	     WILL_FIRE_RL_lwc_rl_out_header ;
  assign lwc_doSender_fifof_dequeueing_whas =
	     lwc_doSender_fifof_cntr_r != 2'd0 && do_ready ;
  assign lwc_headersFifo_rv_port1__read =
	     WILL_FIRE_RL_lwc_rl_out_header ?
	       MUX_lwc_doSender_fifof_q_1_write_1__VAL_3 :
	       lwc_headersFifo_rv ;
  assign lwc_headersFifo_rv_EN_port1__write =
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr &&
	     (lwc_pdiReceiver_fifof_D_OUT[31:28] == 4'd5 ||
	      lwc_pdiReceiver_fifof_D_OUT[31:28] == 4'd4 ||
	      lwc_pdiReceiver_fifof_D_OUT[31:28] == 4'd7 &&
	      lwc_pdiReceiver_fifof_D_OUT[24]) ||
	     WILL_FIRE_RL_lwc_rl_enq_tag ;
  assign lwc_headersFifo_rv_port1__write_1 =
	     MUX_lwc_headersFifo_rv_port1__write_1__SEL_1 ?
	       MUX_lwc_headersFifo_rv_port1__write_1__VAL_1 :
	       33'h183000010 ;
  assign lwc_headersFifo_rv_port2__read =
	     lwc_headersFifo_rv_EN_port1__write ?
	       lwc_headersFifo_rv_port1__write_1 :
	       lwc_headersFifo_rv_port1__read ;
  assign lwc_tagFifo_rv_port1__read =
	     WILL_FIRE_RL_lwc_rl_verify_tag ?
	       MUX_lwc_doSender_fifof_q_1_write_1__VAL_3 :
	       lwc_tagFifo_rv ;
  assign lwc_tagFifo_rv_port1__write_1 =
	     { 1'd1, lwc_pdiReceiver_fifof_D_OUT } ;
  assign lwc_tagFifo_rv_port2__read =
	     WILL_FIRE_RL_lwc_rl_get_tag_data ?
	       lwc_tagFifo_rv_port1__write_1 :
	       lwc_tagFifo_rv_port1__read ;

  // register ascon_asconState
  assign ascon_asconState_D_IN =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze ?
	       MUX_ascon_asconState_write_1__VAL_1 :
	       MUX_ascon_asconState_write_1__VAL_2 ;
  assign ascon_asconState_EN =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze || ascon_xState == 2'd1 ;

  // register ascon_bdiValidBytes
  assign ascon_bdiValidBytes_D_IN = MUX_ascon_sipo_count_reg_write_1__VAL_1 ;
  assign ascon_bdiValidBytes_EN = MUX_ascon_inState_write_1__PSEL_2 ;

  // register ascon_emitTag
  assign ascon_emitTag_D_IN =
	     MUX_ascon_emitTag_write_1__SEL_1 &&
	     MUX_ascon_emitTag_write_1__VAL_1 ;
  assign ascon_emitTag_EN =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     (ascon_inRecvType == 4'd5 || ascon_inRecvType == 4'd4) ||
	     ascon_xState == 2'd1 &&
	     ascon_roundCounter_00_EQ_2_01_AND_ascon_emitTa_ETC___d373 ;

  // register ascon_finalADStep
  assign ascon_finalADStep_D_IN =
	     MUX_ascon_finalADStep_write_1__SEL_1 && !ascon_inEmptyType ;
  assign ascon_finalADStep_EN =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     ascon_inRecvType_2_EQ_1_8_AND_ascon_inEmptyTyp_ETC___d49 ||
	     ascon_xState == 2'd1 && ascon_roundCounter == 4'd2 &&
	     !ascon_initStep &&
	     ascon_finalADStep ;

  // register ascon_inEmptyType
  assign ascon_inEmptyType_D_IN =
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ?
	       lwc_sdiReceiver_fifof_D_OUT[15:0] == 16'd0 :
	       lwc_pdiReceiver_fifof_D_OUT[15:0] == 16'd0 ;
  assign ascon_inEmptyType_EN =
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ;

  // register ascon_inLastBlockPadded
  assign ascon_inLastBlockPadded_D_IN =
	     MUX_ascon_inLastBlockPadded_write_1__SEL_1 ||
	     MUX_ascon_inLastBlockPadded_write_1__VAL_2 ;
  assign ascon_inLastBlockPadded_EN =
	     MUX_ascon_inLastBlockPadded_write_1__SEL_1 ||
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi ||
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi ;

  // register ascon_inLastOfType
  assign ascon_inLastOfType_D_IN =
	     lwc_inWordCounter[13:1] == 13'd0 &&
	     (!lwc_inWordCounter[0] || lwc_finalRemainBytes == 2'd0) &&
	     lwc_inSegEoT ;
  assign ascon_inLastOfType_EN = MUX_ascon_inState_write_1__PSEL_2 ;

  // register ascon_inPadarg
  assign ascon_inPadarg_D_IN = lwc_finalRemainBytes ;
  assign ascon_inPadarg_EN = MUX_ascon_inState_write_1__PSEL_2 ;

  // register ascon_inPaddedBlockZero
  assign ascon_inPaddedBlockZero_D_IN =
	     MUX_ascon_inLastBlockPadded_write_1__SEL_1 &&
	     MUX_ascon_inPaddedBlockZero_write_1__VAL_1 ;
  assign ascon_inPaddedBlockZero_EN =
	     MUX_ascon_inLastBlockPadded_write_1__SEL_1 ||
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     (ascon_inRecvType_2_EQ_5_6_AND_NOT_ascon_inEmpt_ETC___d42 ||
	      ascon_inRecvType_2_EQ_4_7_AND_NOT_ascon_inEmpt_ETC___d43 ||
	      ascon_inRecvType_2_EQ_1_8_AND_NOT_ascon_inEmpt_ETC___d44) ;

  // register ascon_inRecvType
  assign ascon_inRecvType_D_IN =
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ?
	       lwc_pdiReceiver_fifof_D_OUT[31:28] :
	       lwc_sdiReceiver_fifof_D_OUT[31:28] ;
  assign ascon_inRecvType_EN =
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ;

  // register ascon_inState
  always @*
	 begin
	   (* parallel_case *) case (1'b1)
	     MUX_ascon_inState_write_1__SEL_1: ascon_inState_D_IN = 2'd3;
	     MUX_ascon_inState_write_1__SEL_2:
		 ascon_inState_D_IN = MUX_ascon_inState_write_1__VAL_2;
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze:
		 ascon_inState_D_IN = MUX_ascon_inState_write_1__VAL_3;
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr:
		 ascon_inState_D_IN = MUX_ascon_inState_write_1__VAL_4;
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr:
		 ascon_inState_D_IN = MUX_ascon_inState_write_1__VAL_5;
	     default: ascon_inState_D_IN = 2'bxx /* unspecified value */ ;
	   endcase
	 end
  assign ascon_inState_EN =
	     WILL_FIRE_RL_ascon_rl_fill_zero && ascon_sipo_count_reg[1] &&
	     ascon_sipo_count_reg[0] ||
	     _dand2ascon_inState_EN_write ||
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ;

  // register ascon_initStep
  assign ascon_initStep_D_IN = MUX_ascon_initStep_write_1__SEL_1 ;
  assign ascon_initStep_EN =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     ascon_inRecvType == 4'd13 ||
	     ascon_xState == 2'd1 && ascon_roundCounter == 4'd2 &&
	     ascon_initStep ;

  // register ascon_keyR
  assign ascon_keyR_D_IN = ascon_sipo_vec ;
  assign ascon_keyR_EN =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     ascon_inRecvType == 4'd12 ;

  // register ascon_outPadarg
  assign ascon_outPadarg_D_IN =
	     MUX_ascon_outPadarg_write_1__SEL_1 ? ascon_inPadarg : 2'd0 ;
  assign ascon_outPadarg_EN =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     (ascon_inRecvType_2_EQ_5_6_AND_NOT_ascon_inEmpt_ETC___d42 ||
	      ascon_inRecvType_2_EQ_4_7_AND_NOT_ascon_inEmpt_ETC___d43) ||
	     WILL_FIRE_RL_ascon_rl_output_tag ;

  // register ascon_piso_countReg
  always @*
	 begin
	   (* parallel_case *) case (1'b1)
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze:
		 ascon_piso_countReg_D_IN =
		     IF_ascon_inRecvType_2_EQ_13_3_OR_ascon_inRecvT_ETC___d81;
	     MUX_ascon_piso_countReg_write_1__SEL_2:
		 ascon_piso_countReg_D_IN =
		     MUX_ascon_piso_countReg_write_1__VAL_2;
	     WILL_FIRE_RL_ascon_rl_output_tag:
		 ascon_piso_countReg_D_IN = 3'd4;
	     default: ascon_piso_countReg_D_IN =
			  3'bxxx /* unspecified value */ ;
	   endcase
	 end
  assign ascon_piso_countReg_EN =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze ||
	     WILL_FIRE_RL_lwc_rl_sendout_data ||
	     WILL_FIRE_RL_lwc_rl_verify_tag ||
	     WILL_FIRE_RL_ascon_rl_output_tag ;

  // register ascon_piso_vec
  always @*
	 begin
	   (* parallel_case *) case (1'b1)
	     MUX_ascon_piso_countReg_write_1__SEL_2:
		 ascon_piso_vec_D_IN = MUX_ascon_piso_vec_write_1__VAL_1;
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze:
		 ascon_piso_vec_D_IN = MUX_ascon_piso_vec_write_1__VAL_2;
	     WILL_FIRE_RL_ascon_rl_output_tag:
		 ascon_piso_vec_D_IN = ascon_asconState[127:0];
	     default: ascon_piso_vec_D_IN =
			  128'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	   endcase
	 end
  assign ascon_piso_vec_EN =
	     WILL_FIRE_RL_lwc_rl_sendout_data ||
	     WILL_FIRE_RL_lwc_rl_verify_tag ||
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze ||
	     WILL_FIRE_RL_ascon_rl_output_tag ;

  // register ascon_roundCounter
  assign ascon_roundCounter_D_IN =
	     MUX_ascon_roundCounter_write_1__SEL_1 ?
	       MUX_ascon_roundCounter_write_1__VAL_1 :
	       MUX_ascon_roundCounter_write_1__VAL_2 ;
  assign ascon_roundCounter_EN =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     (ascon_inRecvType == 4'd13 || ascon_inRecvType == 4'd5 ||
	      ascon_inRecvType == 4'd4 ||
	      ascon_inRecvType == 4'd1 && !ascon_inEmptyType) ||
	     ascon_xState == 2'd1 &&
	     NOT_ascon_roundCounter_00_EQ_2_01_66_OR_NOT_as_ETC___d367 ;

  // register ascon_sipo_count_reg
  assign ascon_sipo_count_reg_D_IN =
	     MUX_ascon_sipo_count_reg_write_1__SEL_1 ?
	       MUX_ascon_sipo_count_reg_write_1__VAL_1 :
	       3'd0 ;
  assign ascon_sipo_count_reg_EN =
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi ||
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi ||
	     WILL_FIRE_RL_ascon_rl_fill_zero ||
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze ;

  // register ascon_sipo_vec
  always @*
	 begin
	   (* parallel_case *) case (1'b1)
	     WILL_FIRE_RL_ascon_rl_fill_zero:
		 ascon_sipo_vec_D_IN = MUX_ascon_sipo_vec_write_1__VAL_1;
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi:
		 ascon_sipo_vec_D_IN = MUX_ascon_sipo_vec_write_1__VAL_2;
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi:
		 ascon_sipo_vec_D_IN = MUX_ascon_sipo_vec_write_1__VAL_3;
	     default: ascon_sipo_vec_D_IN =
			  128'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	   endcase
	 end
  assign ascon_sipo_vec_EN =
	     WILL_FIRE_RL_ascon_rl_fill_zero ||
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi ||
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi ;

  // register ascon_xState
  always @*
	 begin
	   (* parallel_case *) case (1'b1)
	     MUX_ascon_xState_write_1__SEL_1:
		 ascon_xState_D_IN = MUX_ascon_xState_write_1__VAL_1;
	     MUX_ascon_roundCounter_write_1__SEL_1: ascon_xState_D_IN = 2'd1;
	     WILL_FIRE_RL_ascon_rl_output_tag: ascon_xState_D_IN = 2'd0;
	     default: ascon_xState_D_IN = 2'bxx /* unspecified value */ ;
	   endcase
	 end
  assign ascon_xState_EN =
	     ascon_xState == 2'd1 && ascon_roundCounter == 4'd2 ||
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     (ascon_inRecvType == 4'd13 || ascon_inRecvType == 4'd5 ||
	      ascon_inRecvType == 4'd4 ||
	      ascon_inRecvType == 4'd1 && !ascon_inEmptyType) ||
	     WILL_FIRE_RL_ascon_rl_output_tag ;

  // register lwc_doSender_fifof_cntr_r
  assign lwc_doSender_fifof_cntr_r_D_IN =
	     WILL_FIRE_RL_lwc_doSender_fifof_decCtr ?
	       lwc_doSender_fifof_cntr_r_10_MINUS_1___d419 :
	       MUX_lwc_doSender_fifof_cntr_r_write_1__VAL_2 ;
  assign lwc_doSender_fifof_cntr_r_EN =
	     WILL_FIRE_RL_lwc_doSender_fifof_decCtr ||
	     WILL_FIRE_RL_lwc_doSender_fifof_incCtr ;

  // register lwc_doSender_fifof_q_0
  always @*
	 begin
	   (* parallel_case *) case (1'b1)
	     MUX_lwc_doSender_fifof_q_0_write_1__SEL_1:
		 lwc_doSender_fifof_q_0_D_IN =
		     MUX_lwc_doSender_fifof_q_0_write_1__VAL_1;
	     MUX_lwc_doSender_fifof_q_0_write_1__SEL_2:
		 lwc_doSender_fifof_q_0_D_IN =
		     MUX_lwc_doSender_fifof_q_0_write_1__VAL_2;
	     WILL_FIRE_RL_lwc_doSender_fifof_decCtr:
		 lwc_doSender_fifof_q_0_D_IN = lwc_doSender_fifof_q_1;
	     default: lwc_doSender_fifof_q_0_D_IN =
			  33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	   endcase
	 end
  assign lwc_doSender_fifof_q_0_EN =
	     WILL_FIRE_RL_lwc_doSender_fifof_incCtr &&
	     lwc_doSender_fifof_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_lwc_doSender_fifof_both && _dfoo3 ||
	     WILL_FIRE_RL_lwc_doSender_fifof_decCtr ;

  // register lwc_doSender_fifof_q_1
  always @*
	 begin
	   (* parallel_case *) case (1'b1)
	     MUX_lwc_doSender_fifof_q_1_write_1__SEL_1:
		 lwc_doSender_fifof_q_1_D_IN =
		     MUX_lwc_doSender_fifof_q_0_write_1__VAL_1;
	     MUX_lwc_doSender_fifof_q_1_write_1__SEL_2:
		 lwc_doSender_fifof_q_1_D_IN =
		     MUX_lwc_doSender_fifof_q_1_write_1__VAL_2;
	     WILL_FIRE_RL_lwc_doSender_fifof_decCtr:
		 lwc_doSender_fifof_q_1_D_IN =
		     MUX_lwc_doSender_fifof_q_1_write_1__VAL_3;
	     default: lwc_doSender_fifof_q_1_D_IN =
			  33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	   endcase
	 end
  assign lwc_doSender_fifof_q_1_EN =
	     WILL_FIRE_RL_lwc_doSender_fifof_incCtr &&
	     lwc_doSender_fifof_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_lwc_doSender_fifof_both && _dfoo1 ||
	     WILL_FIRE_RL_lwc_doSender_fifof_decCtr ;

  // register lwc_finalRemainBytes
  assign lwc_finalRemainBytes_D_IN =
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ?
	       lwc_sdiReceiver_fifof_D_OUT[1:0] :
	       lwc_pdiReceiver_fifof_D_OUT[1:0] ;
  assign lwc_finalRemainBytes_EN =
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ;

  // register lwc_headersFifo_rv
  assign lwc_headersFifo_rv_D_IN = lwc_headersFifo_rv_port2__read ;
  assign lwc_headersFifo_rv_EN = 1'b1 ;

  // register lwc_inSegEoT
  assign lwc_inSegEoT_D_IN =
	     !WILL_FIRE_RL_lwc_rl_get_pdi_hdr ||
	     lwc_pdiReceiver_fifof_D_OUT[25] ;
  assign lwc_inSegEoT_EN =
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ;

  // register lwc_inSegLast
  assign lwc_inSegLast_D_IN =
	     !WILL_FIRE_RL_lwc_rl_get_pdi_hdr ||
	     lwc_pdiReceiver_fifof_D_OUT[24] ;
  assign lwc_inSegLast_EN =
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ;

  // register lwc_inSegType
  assign lwc_inSegType_D_IN = lwc_pdiReceiver_fifof_D_OUT[31:28] ;
  assign lwc_inSegType_EN = WILL_FIRE_RL_lwc_rl_get_pdi_hdr ;

  // register lwc_inState
  always @*
	 begin
	   (* parallel_case *) case (1'b1)
	     MUX_lwc_inState_write_1__SEL_2:
		 lwc_inState_D_IN = MUX_lwc_inState_write_1__VAL_2;
	     MUX_lwc_inState_write_1__SEL_3:
		 lwc_inState_D_IN = MUX_lwc_inState_write_1__VAL_3;
	     WILL_FIRE_RL_lwc_rl_pdi_instruction:
		 lwc_inState_D_IN = MUX_lwc_inState_write_1__VAL_5;
	     MUX_lwc_inState_write_1__SEL_1 ||
	     MUX_lwc_inState_write_1__SEL_4 ||
	     WILL_FIRE_RL_lwc_rl_enq_tag:
		 lwc_inState_D_IN = 4'd0;
	     WILL_FIRE_RL_lwc_rl_get_sdi_inst: lwc_inState_D_IN = 4'd3;
	     WILL_FIRE_RL_lwc_rl_get_tag_hdr: lwc_inState_D_IN = 4'd6;
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr: lwc_inState_D_IN = 4'd8;
	     default: lwc_inState_D_IN = 4'bxxxx /* unspecified value */ ;
	   endcase
	 end
  assign lwc_inState_EN =
	     WILL_FIRE_RL_lwc_rl_get_tag_data &&
	     lwc_inWordCounter[13:1] == 13'd0 ||
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr &&
	     (lwc_pdiReceiver_fifof_D_OUT[15:0] != 16'd0 ||
	      lwc_pdiReceiver_fifof_D_OUT[24] ||
	      lwc_pdiReceiver_fifof_D_OUT[31:28] == 4'd5 &&
	      lwc_pdiReceiver_fifof_D_OUT[25]) ||
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi &&
	     (lwc_inWordCounter[13:1] == 13'd0 && !lwc_inWordCounter[0] ||
	      lwc_finalRemainBytes == 2'd0 &&
	      lwc_inWordCounter[13:1] == 13'd0) ||
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi &&
	     (lwc_inWordCounter[13:1] == 13'd0 && !lwc_inWordCounter[0] ||
	      lwc_finalRemainBytes == 2'd0 &&
	      lwc_inWordCounter[13:1] == 13'd0) ||
	     WILL_FIRE_RL_lwc_rl_pdi_instruction ||
	     WILL_FIRE_RL_lwc_rl_enq_tag ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_inst ||
	     WILL_FIRE_RL_lwc_rl_get_tag_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ;

  // register lwc_inWordCounter
  always @*
	 begin
	   (* parallel_case *) case (1'b1)
	     MUX_lwc_inWordCounter_write_1__SEL_1:
		 lwc_inWordCounter_D_IN =
		     MUX_lwc_inWordCounter_write_1__VAL_1;
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr:
		 lwc_inWordCounter_D_IN = lwc_sdiReceiver_fifof_D_OUT[15:2];
	     MUX_lwc_inWordCounter_write_1__SEL_3:
		 lwc_inWordCounter_D_IN = lwc_pdiReceiver_fifof_D_OUT[15:2];
	     default: lwc_inWordCounter_D_IN =
			  14'bxxxxxxxxxxxxxx /* unspecified value */ ;
	   endcase
	 end
  assign lwc_inWordCounter_EN =
	     WILL_FIRE_RL_lwc_rl_get_tag_data ||
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi ||
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_tag_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ;

  // register lwc_outCounter
  always @*
	 begin
	   (* parallel_case *) case (1'b1)
	     MUX_lwc_outCounter_write_1__SEL_1:
		 lwc_outCounter_D_IN = MUX_lwc_outCounter_write_1__VAL_1;
	     MUX_lwc_outCounter_write_1__SEL_2:
		 lwc_outCounter_D_IN = MUX_lwc_outCounter_write_1__VAL_2;
	     WILL_FIRE_RL_lwc_rl_verify_tag: lwc_outCounter_D_IN = x__h22448;
	     default: lwc_outCounter_D_IN =
			  14'bxxxxxxxxxxxxxx /* unspecified value */ ;
	   endcase
	 end
  assign lwc_outCounter_EN =
	     WILL_FIRE_RL_lwc_rl_out_header &&
	     (lwc_headersFifo_rv_BITS_31_TO_0__q5[15:0] != 16'd0 ||
	      lwc_headersFifo_rv_BITS_31_TO_0__q5[31:28] == 4'd4) ||
	     WILL_FIRE_RL_lwc_rl_sendout_data &&
	     NOT_lwc_outCounter_05_BITS_13_TO_1_11_EQ_0_12__ETC___d644 ||
	     WILL_FIRE_RL_lwc_rl_verify_tag ;

  // register lwc_outRemainder
  assign lwc_outRemainder_D_IN = lwc_headersFifo_rv_BITS_31_TO_0__q5[1:0] ;
  assign lwc_outRemainder_EN = WILL_FIRE_RL_lwc_rl_out_header ;

  // register lwc_outSegLast
  assign lwc_outSegLast_D_IN = lwc_headersFifo_rv_BITS_31_TO_0__q5[24] ;
  assign lwc_outSegLast_EN = WILL_FIRE_RL_lwc_rl_out_header ;

  // register lwc_outSegType
  assign lwc_outSegType_D_IN = lwc_headersFifo_rv_BITS_31_TO_0__q5[31:28] ;
  assign lwc_outSegType_EN = WILL_FIRE_RL_lwc_rl_out_header ;

  // register lwc_outState
  always @*
	 begin
	   (* parallel_case *) case (1'b1)
	     MUX_lwc_outState_write_1__SEL_1: lwc_outState_D_IN = 2'd3;
	     MUX_lwc_outState_write_1__SEL_2:
		 lwc_outState_D_IN = MUX_lwc_outState_write_1__VAL_2;
	     MUX_lwc_outState_write_1__SEL_3:
		 lwc_outState_D_IN = MUX_lwc_outState_write_1__VAL_3;
	     WILL_FIRE_RL_lwc_rl_out_status: lwc_outState_D_IN = 2'd0;
	     default: lwc_outState_D_IN = 2'bxx /* unspecified value */ ;
	   endcase
	 end
  assign lwc_outState_EN =
	     WILL_FIRE_RL_lwc_rl_verify_tag &&
	     lwc_outCounter[13:1] == 13'd0 ||
	     WILL_FIRE_RL_lwc_rl_sendout_data &&
	     (lwc_outCounter[13:1] == 13'd0 && !lwc_outCounter[0] ||
	      lwc_outRemainder == 2'd0 && lwc_outCounter[13:1] == 13'd0) ||
	     WILL_FIRE_RL_lwc_rl_out_header &&
	     (lwc_headersFifo_rv_BITS_31_TO_0__q5[15:0] != 16'd0 ||
	      lwc_headersFifo_rv_BITS_31_TO_0__q5[24] ||
	      lwc_headersFifo_rv_BITS_31_TO_0__q5[31:28] == 4'd4) ||
	     WILL_FIRE_RL_lwc_rl_out_status ;

  // register lwc_statFailure
  assign lwc_statFailure_D_IN = MUX_lwc_statFailure_write_1__SEL_1 ;
  assign lwc_statFailure_EN =
	     WILL_FIRE_RL_lwc_rl_verify_tag &&
	     NOT_IF_lwc_tagFifo_rv_port0__read__96_BIT_32_9_ETC___d610 ||
	     WILL_FIRE_RL_lwc_rl_out_status ;

  // register lwc_tagFifo_rv
  assign lwc_tagFifo_rv_D_IN = lwc_tagFifo_rv_port2__read ;
  assign lwc_tagFifo_rv_EN = 1'b1 ;

  // submodule lwc_pdiReceiver_fifof
  assign lwc_pdiReceiver_fifof_D_IN = pdi_data ;
  assign lwc_pdiReceiver_fifof_ENQ =
	     lwc_pdiReceiver_fifof_FULL_N && pdi_valid ;
  assign lwc_pdiReceiver_fifof_DEQ = lwc_pdiReceiver_deq_pw_whas ;
  assign lwc_pdiReceiver_fifof_CLR = 1'b0 ;

  // submodule lwc_sdiReceiver_fifof
  assign lwc_sdiReceiver_fifof_D_IN = sdi_data ;
  assign lwc_sdiReceiver_fifof_ENQ =
	     lwc_sdiReceiver_fifof_FULL_N && sdi_valid ;
  assign lwc_sdiReceiver_fifof_DEQ = lwc_sdiReceiver_deq_pw_whas ;
  assign lwc_sdiReceiver_fifof_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_ascon_finalADStep_04_THEN_ascon_asconState__ETC___d360 =
	     ascon_finalADStep ?
	       { state_x3__h12074, x__h11858 } :
	       { x__h13435, x__h13571 } ;
  assign IF_ascon_inEmptyType_1_THEN_0_ELSE_IF_ascon_in_ETC___d26 =
	     ascon_inEmptyType ?
	       2'd0 :
	       (ascon_inLastOfType ?
		  (ascon_inLastBlockPadded ? 2'd0 : 2'd2) :
		  2'd1) ;
  assign IF_ascon_inEmptyType_1_THEN_0_ELSE_IF_ascon_in_ETC___d79 =
	     ascon_inEmptyType ?
	       3'd0 :
	       (ascon_inLastOfType ?
		  IF_ascon_inLastBlockPadded_3_THEN_IF_ascon_inP_ETC___d77 :
		  3'd4) ;
  assign IF_ascon_inEmptyType_1_THEN_12_ELSE_IF_ascon_i_ETC___d37 =
	     ascon_inEmptyType ?
	       4'd12 :
	       (ascon_inLastOfType ?
		  (ascon_inLastBlockPadded ? 4'd12 : 4'd8) :
		  4'd8) ;
  assign IF_ascon_inEmptyType_1_THEN_ascon_asconState_5_ETC___d67 =
	     ascon_inEmptyType ?
	       ascon_asconState[319:192] :
	       { newState_x0__h1829, newState_x1__h1830 } ;
  assign IF_ascon_inLastBlockPadded_3_THEN_IF_ascon_inP_ETC___d77 =
	     ascon_inLastBlockPadded ?
	       (ascon_inPaddedBlockZero ? 3'd0 : ascon_bdiValidBytes) :
	       3'd4 ;
  assign IF_ascon_inRecvType_2_EQ_5_6_OR_ascon_inRecvTy_ETC___d191 =
	     { CASE_ascon_inRecvType_4_x1_avValue_fst_x2848_5_ETC__q3,
	       CASE_ascon_inRecvType_4_x1_avValue_fst_x3849_5_ETC__q4,
	       ascon_asconState[63:0] } ;
  assign IF_ascon_initStep_05_THEN_ascon_asconState_5_B_ETC___d361 =
	     ascon_initStep ?
	       { x__h13435, x__h13571 } :
	       IF_ascon_finalADStep_04_THEN_ascon_asconState__ETC___d360 ;
  assign IF_ascon_roundCounter_00_EQ_2_01_AND_NOT_ascon_ETC___d363 =
	     (ascon_roundCounter == 4'd2 && !ascon_emitTag &&
	      !ascon_initStep &&
	      !ascon_finalADStep) ?
	       { state_x3__h12074, state_x4__h12061 } :
	       IF_ascon_roundCounter_00_EQ_2_01_THEN_IF_ascon_ETC___d362 ;
  assign IF_ascon_roundCounter_00_EQ_2_01_THEN_IF_ascon_ETC___d362 =
	     (ascon_roundCounter == 4'd2) ?
	       IF_ascon_initStep_05_THEN_ascon_asconState_5_B_ETC___d361 :
	       { state_x3__h12074, state_x4__h12061 } ;
  assign IF_lwc_inSegType_51_EQ_5_54_AND_lwc_inSegEoT_0_ETC___d558 =
	     (lwc_inSegType == 4'd5 && lwc_inSegEoT) ?
	       4'd5 :
	       (lwc_inSegLast ? 4'd0 : 4'd2) ;
  assign INV_ascon_asconState_5_BITS_191_TO_136_11_CONC_ETC___d267 =
	     x__h12804 ^ y__h12805 ;
  assign NOT_IF_lwc_tagFifo_rv_port0__read__96_BIT_32_9_ETC___d610 =
	     lwc_tagFifo_rv[31:0] != ascon_piso_vec[127:96] ;
  assign NOT_ascon_roundCounter_00_EQ_2_01_66_OR_NOT_as_ETC___d367 =
	     ascon_roundCounter != 4'd2 ||
	     !ascon_emitTag && !ascon_initStep && !ascon_finalADStep ;
  assign NOT_lwc_outCounter_05_BITS_13_TO_1_11_EQ_0_12__ETC___d644 =
	     lwc_outCounter[13:1] != 13'd0 ||
	     lwc_outRemainder != 2'd0 && lwc_outCounter[0] ||
	     lwc_outSegType == 4'd4 && lwc_outSegLast ;
  assign _dand2ascon_inState_EN_write =
	     (WILL_FIRE_RL_lwc_rl_feed_core_pdi ||
	      WILL_FIRE_RL_lwc_rl_feed_core_sdi) &&
	     (ascon_sipo_count_reg[1] && ascon_sipo_count_reg[0] ||
	      lwc_inWordCounter_96_BITS_13_TO_1_99_EQ_0_00_A_ETC___d509) ;
  assign _dfoo1 =
	     lwc_doSender_fifof_cntr_r != 2'd2 ||
	     lwc_doSender_fifof_cntr_r_10_MINUS_1___d419 == 2'd1 ;
  assign _dfoo3 =
	     lwc_doSender_fifof_cntr_r != 2'd1 ||
	     lwc_doSender_fifof_cntr_r_10_MINUS_1___d419 == 2'd0 ;
  assign ascon_inRecvType_2_EQ_1_8_AND_NOT_ascon_inEmpt_ETC___d44 =
	     ascon_inRecvType == 4'd1 && !ascon_inEmptyType &&
	     ascon_inLastBlockPadded &&
	     ascon_inLastOfType ;
  assign ascon_inRecvType_2_EQ_1_8_AND_ascon_inEmptyTyp_ETC___d49 =
	     ascon_inRecvType == 4'd1 &&
	     (ascon_inEmptyType ||
	      ascon_inLastBlockPadded && ascon_inLastOfType) ;
  assign ascon_inRecvType_2_EQ_4_7_AND_NOT_ascon_inEmpt_ETC___d43 =
	     ascon_inRecvType == 4'd4 && !ascon_inEmptyType &&
	     ascon_inLastBlockPadded &&
	     ascon_inLastOfType ;
  assign ascon_inRecvType_2_EQ_5_6_AND_NOT_ascon_inEmpt_ETC___d42 =
	     ascon_inRecvType == 4'd5 && !ascon_inEmptyType &&
	     ascon_inLastBlockPadded &&
	     ascon_inLastOfType ;
  assign ascon_roundCounter_00_EQ_2_01_AND_ascon_emitTa_ETC___d373 =
	     ascon_roundCounter == 4'd2 && ascon_emitTag && !ascon_initStep &&
	     !ascon_finalADStep ;
  assign ascon_roundCounter_00_MINUS_1___d214 = ascon_roundCounter - 4'd1 ;
  assign b__h19207 = { lwc_sdiReceiver_fifof_D_OUT[31:24], 24'd8388608 } ;
  assign b__h19214 = { lwc_sdiReceiver_fifof_D_OUT[31:16], 16'd32768 } ;
  assign b__h19217 = { lwc_sdiReceiver_fifof_D_OUT[31:8], 8'd128 } ;
  assign b__h20163 = { lwc_pdiReceiver_fifof_D_OUT[31:24], 24'd8388608 } ;
  assign b__h20170 = { lwc_pdiReceiver_fifof_D_OUT[31:16], 16'd32768 } ;
  assign b__h20173 = { lwc_pdiReceiver_fifof_D_OUT[31:8], 8'd128 } ;
  assign b__h22315 = { ascon_piso_vec[127:120], 24'd0 } ;
  assign b__h22322 = { ascon_piso_vec[127:112], 16'd0 } ;
  assign b__h22325 = { ascon_piso_vec[127:104], 8'd0 } ;
  assign lwc_doSender_fifof_cntr_r_10_MINUS_1___d419 =
	     lwc_doSender_fifof_cntr_r - 2'd1 ;
  assign lwc_headersFifo_rv_BITS_31_TO_0__q5 = lwc_headersFifo_rv[31:0] ;
  assign lwc_inWordCounter_96_BITS_13_TO_1_99_EQ_0_00_A_ETC___d509 =
	     lwc_inWordCounter[13:1] == 13'd0 && lwc_inSegEoT &&
	     !lwc_inWordCounter[0] ||
	     lwc_finalRemainBytes == 2'd0 &&
	     lwc_inWordCounter[13:1] == 13'd0 &&
	     lwc_inSegEoT ;
  assign newState___1_x2__h2826 =
	     ascon_asconState[191:128] ^ ascon_keyR[127:64] ;
  assign newState___1_x3__h2827 =
	     ascon_asconState[127:64] ^ ascon_keyR[63:0] ;
  assign newState___2_x0__h3356 =
	     { IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d103,
	       x1_avValue_fst_x0__h2854[31:0] } ;
  assign newState___2_x0__h3567 =
	     { ascon_sipo_vec[127:96],
	       IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d119 } ;
  assign newState_x0__h1829 =
	     ascon_asconState[319:256] ^ ascon_sipo_vec[127:64] ;
  assign newState_x1__h1830 =
	     ascon_asconState[255:192] ^ ascon_sipo_vec[63:0] ;
  assign newState_x4__h1575 =
	     { ascon_asconState[63:1], ~ascon_asconState[0] } ;
  assign spliced_bits__h12341 =
	     ascon_asconState[135:128] ^
	     CASE_ascon_roundCounter_00_MINUS_1_14_0_0x4B_1_ETC__q1 ;
  assign spliced_bits__h12767 =
	     INV_ascon_asconState_5_BITS_191_TO_136_11_CONC_ETC___d267[7:0] ^
	     CASE_x303_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 ;
  assign state_x0__h12133 = t0__h12113 ^ y__h12180 ;
  assign state_x0__h12196 = x__h12242 ^ y__h12243 ;
  assign state_x0__h12268 = t0__h5458 ^ y__h12315 ;
  assign state_x1__h12144 = t1__h12114 ^ y__h13229 ;
  assign state_x1__h12279 = ascon_asconState[255:192] ^ y__h12675 ;
  assign state_x2__h12130 = y__h12648 ^ y__h13345 ;
  assign state_x2__h12188 =
	     { INV_ascon_asconState_5_BITS_191_TO_136_11_CONC_ETC___d267[63:8],
	       spliced_bits__h12767 } ;
  assign state_x2__h12265 = y__h12337 ^ y__h6161 ;
  assign state_x2__h12323 =
	     { ascon_asconState[191:136], spliced_bits__h12341 } ;
  assign state_x3__h12074 = x__h13447 ^ y__h13448 ;
  assign state_x3__h12141 = state_x3__h12194 ^ y__h13461 ;
  assign state_x3__h12194 = x__h13013 ^ y__h13014 ;
  assign state_x3__h5486 = ascon_asconState[127:64] ^ y__h6370 ;
  assign state_x4__h12061 = state_x4__h12137 ^ y__h11880 ;
  assign state_x4__h12137 = x__h13000 ^ y__h13001 ;
  assign state_x4__h5405 = state_x4__h5482 ^ y__h5903 ;
  assign state_x4__h5482 = x__h5802 ^ y__h5803 ;
  assign t0__h12113 = state_x0__h12196 ^ state_x4__h5405 ;
  assign t0__h5458 = ascon_asconState[319:256] ^ ascon_asconState[63:0] ;
  assign t1__h12114 = x__h12661 ^ y__h12662 ;
  assign x1_avValue_fst_x2__h2838 =
	     ascon_inLastBlockPadded ?
	       newState___1_x2__h2826 :
	       ascon_asconState[191:128] ;
  assign x1_avValue_fst_x2__h2843 =
	     ascon_inLastOfType ?
	       x1_avValue_fst_x2__h2838 :
	       ascon_asconState[191:128] ;
  assign x1_avValue_fst_x2__h2848 =
	     ascon_inEmptyType ?
	       newState___1_x2__h2826 :
	       x1_avValue_fst_x2__h2843 ;
  assign x1_avValue_fst_x3__h2839 =
	     ascon_inLastBlockPadded ?
	       newState___1_x3__h2827 :
	       ascon_asconState[127:64] ;
  assign x1_avValue_fst_x3__h2844 =
	     ascon_inLastOfType ?
	       x1_avValue_fst_x3__h2839 :
	       ascon_asconState[127:64] ;
  assign x1_avValue_fst_x3__h2849 =
	     ascon_inEmptyType ?
	       newState___1_x3__h2827 :
	       x1_avValue_fst_x3__h2844 ;
  assign x1_avValue_x0__h1842 =
	     ascon_inEmptyType ?
	       ascon_asconState[319:256] :
	       newState_x0__h1829 ;
  assign x1_avValue_x1__h1843 =
	     ascon_inEmptyType ?
	       ascon_asconState[255:192] :
	       newState_x1__h1830 ;
  assign x1_avValue_x4__h1846 =
	     ascon_inEmptyType ? newState_x4__h1575 : ascon_asconState[63:0] ;
  assign x__h11858 = { state_x4__h12061[63:1], ~state_x4__h12061[0] } ;
  assign x__h12048 = x__h12107 ^ y__h12108 ;
  assign x__h12107 = state_x0__h12133 ^ state_x4__h12137 ;
  assign x__h12242 = state_x0__h12268 ^ state_x4__h5482 ;
  assign x__h12462 = { x__h12242[18:0], x__h12242[63:19] } ;
  assign x__h12647 = ~t1__h12114 ;
  assign x__h12661 = state_x1__h12279 ^ state_x0__h12268 ;
  assign x__h12676 = ~y__h12337 ;
  assign x__h12679 = { x__h12661[60:0], x__h12661[63:61] } ;
  assign x__h12804 = ~state_x2__h12265 ;
  assign x__h12822 = { x__h12804[0], x__h12804[63:1] } ;
  assign x__h13000 = state_x4__h5405 ^ state_x3__h12194 ;
  assign x__h13013 = state_x3__h5486 ^ state_x2__h12265 ;
  assign x__h13030 = { x__h13013[9:0], x__h13013[63:10] } ;
  assign x__h13116 = ~t0__h12113 ;
  assign x__h13117 = { x__h12107[18:0], x__h12107[63:19] } ;
  assign x__h13203 = x__h13215 ^ y__h13216 ;
  assign x__h13215 = state_x1__h12144 ^ state_x0__h12133 ;
  assign x__h13230 = ~y__h12648 ;
  assign x__h13233 = { x__h13215[60:0], x__h13215[63:61] } ;
  assign x__h13319 = x__h13331 ^ y__h13332 ;
  assign x__h13331 = ~state_x2__h12130 ;
  assign x__h13346 = ~state_x3__h12194 ;
  assign x__h13349 = { x__h13331[0], x__h13331[63:1] } ;
  assign x__h13435 = state_x3__h12074 ^ ascon_keyR[127:64] ;
  assign x__h13447 = state_x3__h12141 ^ state_x2__h12130 ;
  assign x__h13462 = ~x__h13000 ;
  assign x__h13464 = { x__h13447[9:0], x__h13447[63:10] } ;
  assign x__h13571 = state_x4__h12061 ^ ascon_keyR[63:0] ;
  assign x__h13585 = { state_x4__h12137[6:0], state_x4__h12137[63:7] } ;
  assign x__h22291 =
	     (ascon_piso_countReg == 3'd1 && ascon_inLastOfType) ?
	       IF_ascon_outPadarg_18_EQ_0_19_THEN_ascon_piso__ETC___d630 :
	       ascon_piso_vec[127:96] ;
  assign x__h22448 = lwc_outCounter - 14'd1 ;
  assign x__h5546 = ~ascon_asconState[255:192] ;
  assign x__h5802 = ascon_asconState[63:0] ^ ascon_asconState[127:64] ;
  assign x__h5804 = ~t0__h5458 ;
  assign x__h5904 = { state_x4__h5482[6:0], state_x4__h5482[63:7] } ;
  assign x__h6162 = ~ascon_asconState[127:64] ;
  assign x__h6303 = ascon_roundCounter_00_MINUS_1___d214 - 4'd1 ;
  assign x__h6371 = ~x__h5802 ;
  assign y__h11880 = x__h13585 ^ y__h13586 ;
  assign y__h12108 = x__h13117 ^ y__h13118 ;
  assign y__h12180 = x__h12647 & y__h12648 ;
  assign y__h12243 = x__h12462 ^ y__h12463 ;
  assign y__h12315 = x__h5546 & y__h12337 ;
  assign y__h12337 = state_x2__h12323 ^ ascon_asconState[255:192] ;
  assign y__h12463 = { x__h12242[27:0], x__h12242[63:28] } ;
  assign y__h12648 = state_x2__h12188 ^ t1__h12114 ;
  assign y__h12662 = x__h12679 ^ y__h12680 ;
  assign y__h12675 = x__h12676 & ascon_asconState[127:64] ;
  assign y__h12680 = { x__h12661[38:0], x__h12661[63:39] } ;
  assign y__h12805 = x__h12822 ^ y__h12823 ;
  assign y__h12823 = { x__h12804[5:0], x__h12804[63:6] } ;
  assign y__h13001 = x__h13116 & t1__h12114 ;
  assign y__h13014 = x__h13030 ^ y__h13031 ;
  assign y__h13031 = { x__h13013[16:0], x__h13013[63:17] } ;
  assign y__h13118 = { x__h12107[27:0], x__h12107[63:28] } ;
  assign y__h13216 = x__h13233 ^ y__h13234 ;
  assign y__h13229 = x__h13230 & state_x3__h12194 ;
  assign y__h13234 = { x__h13215[38:0], x__h13215[63:39] } ;
  assign y__h13332 = x__h13349 ^ y__h13350 ;
  assign y__h13345 = x__h13346 & x__h13000 ;
  assign y__h13350 = { x__h13331[5:0], x__h13331[63:6] } ;
  assign y__h13448 = x__h13464 ^ y__h13465 ;
  assign y__h13461 = x__h13462 & t0__h12113 ;
  assign y__h13465 = { x__h13447[16:0], x__h13447[63:17] } ;
  assign y__h13586 = { state_x4__h12137[40:0], state_x4__h12137[63:41] } ;
  assign y__h5803 = x__h5804 & ascon_asconState[255:192] ;
  assign y__h5903 = x__h5904 ^ y__h5905 ;
  assign y__h5905 = { state_x4__h5482[40:0], state_x4__h5482[63:41] } ;
  assign y__h6161 = x__h6162 & x__h5802 ;
  assign y__h6370 = x__h6371 & t0__h5458 ;
  always @*
	 begin
	   case (ascon_inRecvType)
	     4'd1: x1_avValue_fst_x0__h2854 = x1_avValue_x0__h1842;
	     4'd4, 4'd5: x1_avValue_fst_x0__h2854 = newState_x0__h1829;
	     4'd12: x1_avValue_fst_x0__h2854 = ascon_asconState[319:256];
	     4'd13: x1_avValue_fst_x0__h2854 = 64'h80800C0800000000;
	     default: x1_avValue_fst_x0__h2854 = ascon_asconState[319:256];
	   endcase
	 end
  always @*
	 begin
	   case (ascon_inRecvType)
	     4'd1: x1_avValue_fst_x1__h2855 = x1_avValue_x1__h1843;
	     4'd4, 4'd5: x1_avValue_fst_x1__h2855 = newState_x1__h1830;
	     4'd12: x1_avValue_fst_x1__h2855 = ascon_asconState[255:192];
	     4'd13: x1_avValue_fst_x1__h2855 = ascon_keyR[127:64];
	     default: x1_avValue_fst_x1__h2855 = ascon_asconState[255:192];
	   endcase
	 end
  always @*
	 begin
	   case (ascon_inRecvType)
	     4'd1, 4'd12, 4'd13:
		 IF_ascon_inRecvType_2_EQ_13_3_OR_ascon_inRecvT_ETC___d81 =
		     3'd0;
	     4'd4, 4'd5:
		 IF_ascon_inRecvType_2_EQ_13_3_OR_ascon_inRecvT_ETC___d81 =
		     IF_ascon_inEmptyType_1_THEN_0_ELSE_IF_ascon_in_ETC___d79;
	     default: IF_ascon_inRecvType_2_EQ_13_3_OR_ascon_inRecvT_ETC___d81 =
			  3'd0;
	   endcase
	 end
  always @*
	 begin
	   case (ascon_inPadarg)
	     2'd0:
		 IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d103 =
		     ascon_sipo_vec[127:96];
	     2'd1:
		 IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d103 =
		     { ascon_sipo_vec[127:120],
		       x1_avValue_fst_x0__h2854[55:32] };
	     2'd2:
		 IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d103 =
		     { ascon_sipo_vec[127:112],
		       x1_avValue_fst_x0__h2854[47:32] };
	     2'd3:
		 IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d103 =
		     { ascon_sipo_vec[127:104],
		       x1_avValue_fst_x0__h2854[39:32] };
	   endcase
	 end
  always @*
	 begin
	   case (ascon_inRecvType)
	     4'd1:
		 IF_ascon_inRecvType_2_EQ_13_3_THEN_ascon_keyR__ETC___d132 =
		     x1_avValue_x1__h1843;
	     4'd4, 4'd5:
		 IF_ascon_inRecvType_2_EQ_13_3_THEN_ascon_keyR__ETC___d132 =
		     newState_x1__h1830;
	     4'd13:
		 IF_ascon_inRecvType_2_EQ_13_3_THEN_ascon_keyR__ETC___d132 =
		     ascon_keyR[127:64];
	     default: IF_ascon_inRecvType_2_EQ_13_3_THEN_ascon_keyR__ETC___d132 =
			  ascon_asconState[255:192];
	   endcase
	 end
  always @*
	 begin
	   case (ascon_inPadarg)
	     2'd0:
		 IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d146 =
		     ascon_sipo_vec[63:32];
	     2'd1:
		 IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d146 =
		     { ascon_sipo_vec[63:56],
		       x1_avValue_fst_x1__h2855[55:32] };
	     2'd2:
		 IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d146 =
		     { ascon_sipo_vec[63:48],
		       x1_avValue_fst_x1__h2855[47:32] };
	     2'd3:
		 IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d146 =
		     { ascon_sipo_vec[63:40],
		       x1_avValue_fst_x1__h2855[39:32] };
	   endcase
	 end
  always @*
	 begin
	   case (ascon_inPadarg)
	     2'd0:
		 IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d161 =
		     ascon_sipo_vec[31:0];
	     2'd1:
		 IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d161 =
		     { ascon_sipo_vec[31:24],
		       x1_avValue_fst_x1__h2855[23:0] };
	     2'd2:
		 IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d161 =
		     { ascon_sipo_vec[31:16],
		       x1_avValue_fst_x1__h2855[15:0] };
	     2'd3:
		 IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d161 =
		     { ascon_sipo_vec[31:8], x1_avValue_fst_x1__h2855[7:0] };
	   endcase
	 end
  always @*
	 begin
	   case (IF_ascon_inRecvType_2_EQ_13_3_OR_ascon_inRecvT_ETC___d81)
	     3'd1, 3'd2:
		 IF_IF_ascon_inRecvType_2_EQ_13_3_OR_ascon_inRe_ETC___d166 =
		     x1_avValue_fst_x1__h2855;
	     3'd3:
		 IF_IF_ascon_inRecvType_2_EQ_13_3_OR_ascon_inRe_ETC___d166 =
		     { IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d146,
		       IF_ascon_inRecvType_2_EQ_13_3_THEN_ascon_keyR__ETC___d132[31:0] };
	     3'd4:
		 IF_IF_ascon_inRecvType_2_EQ_13_3_OR_ascon_inRe_ETC___d166 =
		     ascon_inLastBlockPadded ?
		       { ascon_sipo_vec[63:32],
			 IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d161 } :
		       ascon_sipo_vec[63:0];
	     default: IF_IF_ascon_inRecvType_2_EQ_13_3_OR_ascon_inRe_ETC___d166 =
			  x1_avValue_fst_x1__h2855;
	   endcase
	 end
  always @*
	 begin
	   case (ascon_inRecvType)
	     4'd1: x__h3854 = x1_avValue_x1__h1843;
	     4'd4: x__h3854 = newState_x1__h1830;
	     4'd5:
		 x__h3854 =
		     IF_IF_ascon_inRecvType_2_EQ_13_3_OR_ascon_inRe_ETC___d166;
	     4'd12: x__h3854 = ascon_asconState[255:192];
	     4'd13: x__h3854 = ascon_keyR[127:64];
	     default: x__h3854 = ascon_asconState[255:192];
	   endcase
	 end
  always @*
	 begin
	   case (ascon_inPadarg)
	     2'd0:
		 IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d119 =
		     ascon_sipo_vec[95:64];
	     2'd1:
		 IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d119 =
		     { ascon_sipo_vec[95:88],
		       x1_avValue_fst_x0__h2854[23:0] };
	     2'd2:
		 IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d119 =
		     { ascon_sipo_vec[95:80],
		       x1_avValue_fst_x0__h2854[15:0] };
	     2'd3:
		 IF_ascon_inPadarg_4_EQ_0_3_THEN_ascon_sipo_vec_ETC___d119 =
		     { ascon_sipo_vec[95:72], x1_avValue_fst_x0__h2854[7:0] };
	   endcase
	 end
  always @*
	 begin
	   case (IF_ascon_inRecvType_2_EQ_13_3_OR_ascon_inRecvT_ETC___d81)
	     3'd1:
		 IF_IF_ascon_inRecvType_2_EQ_13_3_OR_ascon_inRe_ETC___d126 =
		     newState___2_x0__h3356;
	     3'd2:
		 IF_IF_ascon_inRecvType_2_EQ_13_3_OR_ascon_inRe_ETC___d126 =
		     newState___2_x0__h3567;
	     3'd3, 3'd4:
		 IF_IF_ascon_inRecvType_2_EQ_13_3_OR_ascon_inRe_ETC___d126 =
		     ascon_sipo_vec[127:64];
	     default: IF_IF_ascon_inRecvType_2_EQ_13_3_OR_ascon_inRe_ETC___d126 =
			  x1_avValue_fst_x0__h2854;
	   endcase
	 end
  always @*
	 begin
	   case (ascon_inRecvType)
	     4'd1: x__h3300 = x1_avValue_x0__h1842;
	     4'd4: x__h3300 = newState_x0__h1829;
	     4'd5:
		 x__h3300 =
		     IF_IF_ascon_inRecvType_2_EQ_13_3_OR_ascon_inRe_ETC___d126;
	     4'd12: x__h3300 = ascon_asconState[319:256];
	     4'd13: x__h3300 = 64'h80800C0800000000;
	     default: x__h3300 = ascon_asconState[319:256];
	   endcase
	 end
  always @*
	 begin
	   case (ascon_roundCounter_00_MINUS_1___d214)
	     4'd0:
		 CASE_ascon_roundCounter_00_MINUS_1_14_0_0x4B_1_ETC__q1 =
		     8'h4B;
	     4'd1:
		 CASE_ascon_roundCounter_00_MINUS_1_14_0_0x4B_1_ETC__q1 =
		     8'h5A;
	     4'd2:
		 CASE_ascon_roundCounter_00_MINUS_1_14_0_0x4B_1_ETC__q1 =
		     8'h69;
	     4'd3:
		 CASE_ascon_roundCounter_00_MINUS_1_14_0_0x4B_1_ETC__q1 =
		     8'h78;
	     4'd4:
		 CASE_ascon_roundCounter_00_MINUS_1_14_0_0x4B_1_ETC__q1 =
		     8'h87;
	     4'd5:
		 CASE_ascon_roundCounter_00_MINUS_1_14_0_0x4B_1_ETC__q1 =
		     8'h96;
	     4'd6:
		 CASE_ascon_roundCounter_00_MINUS_1_14_0_0x4B_1_ETC__q1 =
		     8'hA5;
	     4'd7:
		 CASE_ascon_roundCounter_00_MINUS_1_14_0_0x4B_1_ETC__q1 =
		     8'hB4;
	     4'd8:
		 CASE_ascon_roundCounter_00_MINUS_1_14_0_0x4B_1_ETC__q1 =
		     8'hC3;
	     4'd9:
		 CASE_ascon_roundCounter_00_MINUS_1_14_0_0x4B_1_ETC__q1 =
		     8'hD2;
	     4'd10:
		 CASE_ascon_roundCounter_00_MINUS_1_14_0_0x4B_1_ETC__q1 =
		     8'hE1;
	     4'd11:
		 CASE_ascon_roundCounter_00_MINUS_1_14_0_0x4B_1_ETC__q1 =
		     8'hF0;
	     default: CASE_ascon_roundCounter_00_MINUS_1_14_0_0x4B_1_ETC__q1 =
			  8'bxxxxxxxx /* unspecified value */ ;
	   endcase
	 end
  always @*
	 begin
	   case (x__h6303)
	     4'd0:
		 CASE_x303_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 =
		     8'h4B;
	     4'd1:
		 CASE_x303_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 =
		     8'h5A;
	     4'd2:
		 CASE_x303_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 =
		     8'h69;
	     4'd3:
		 CASE_x303_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 =
		     8'h78;
	     4'd4:
		 CASE_x303_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 =
		     8'h87;
	     4'd5:
		 CASE_x303_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 =
		     8'h96;
	     4'd6:
		 CASE_x303_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 =
		     8'hA5;
	     4'd7:
		 CASE_x303_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 =
		     8'hB4;
	     4'd8:
		 CASE_x303_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 =
		     8'hC3;
	     4'd9:
		 CASE_x303_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 =
		     8'hD2;
	     4'd10:
		 CASE_x303_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 =
		     8'hE1;
	     4'd11:
		 CASE_x303_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 =
		     8'hF0;
	     default: CASE_x303_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 =
			  8'bxxxxxxxx /* unspecified value */ ;
	   endcase
	 end
  always @*
	 begin
	   case (lwc_finalRemainBytes)
	     2'd0:
		 IF_lwc_finalRemainBytes_98_EQ_0_06_THEN_lwc_pd_ETC___d548 =
		     lwc_pdiReceiver_fifof_D_OUT;
	     2'd1:
		 IF_lwc_finalRemainBytes_98_EQ_0_06_THEN_lwc_pd_ETC___d548 =
		     b__h20163;
	     2'd2:
		 IF_lwc_finalRemainBytes_98_EQ_0_06_THEN_lwc_pd_ETC___d548 =
		     b__h20170;
	     2'd3:
		 IF_lwc_finalRemainBytes_98_EQ_0_06_THEN_lwc_pd_ETC___d548 =
		     b__h20173;
	   endcase
	 end
  always @*
	 begin
	   case (lwc_finalRemainBytes)
	     2'd0:
		 IF_lwc_finalRemainBytes_98_EQ_0_06_THEN_lwc_sd_ETC___d520 =
		     lwc_sdiReceiver_fifof_D_OUT;
	     2'd1:
		 IF_lwc_finalRemainBytes_98_EQ_0_06_THEN_lwc_sd_ETC___d520 =
		     b__h19207;
	     2'd2:
		 IF_lwc_finalRemainBytes_98_EQ_0_06_THEN_lwc_sd_ETC___d520 =
		     b__h19214;
	     2'd3:
		 IF_lwc_finalRemainBytes_98_EQ_0_06_THEN_lwc_sd_ETC___d520 =
		     b__h19217;
	   endcase
	 end
  always @*
	 begin
	   case (ascon_outPadarg)
	     2'd0:
		 IF_ascon_outPadarg_18_EQ_0_19_THEN_ascon_piso__ETC___d630 =
		     ascon_piso_vec[127:96];
	     2'd1:
		 IF_ascon_outPadarg_18_EQ_0_19_THEN_ascon_piso__ETC___d630 =
		     b__h22315;
	     2'd2:
		 IF_ascon_outPadarg_18_EQ_0_19_THEN_ascon_piso__ETC___d630 =
		     b__h22322;
	     2'd3:
		 IF_ascon_outPadarg_18_EQ_0_19_THEN_ascon_piso__ETC___d630 =
		     b__h22325;
	   endcase
	 end
  always @*
	 begin
	   case (ascon_inRecvType)
	     4'd4, 4'd5:
		 CASE_ascon_inRecvType_4_x1_avValue_fst_x2848_5_ETC__q3 =
		     x1_avValue_fst_x2__h2848;
	     default: CASE_ascon_inRecvType_4_x1_avValue_fst_x2848_5_ETC__q3 =
			  ascon_asconState[191:128];
	   endcase
	 end
  always @*
	 begin
	   case (ascon_inRecvType)
	     4'd4, 4'd5:
		 CASE_ascon_inRecvType_4_x1_avValue_fst_x3849_5_ETC__q4 =
		     x1_avValue_fst_x3__h2849;
	     default: CASE_ascon_inRecvType_4_x1_avValue_fst_x3849_5_ETC__q4 =
			  ascon_asconState[127:64];
	   endcase
	 end
  always @*
	 begin
	   case (ascon_inRecvType)
	     4'd1:
		 IF_ascon_inRecvType_2_EQ_12_4_THEN_ascon_ascon_ETC___d194 =
		     { ascon_asconState[191:64], x1_avValue_x4__h1846 };
	     4'd12:
		 IF_ascon_inRecvType_2_EQ_12_4_THEN_ascon_ascon_ETC___d194 =
		     ascon_asconState[191:0];
	     4'd13:
		 IF_ascon_inRecvType_2_EQ_12_4_THEN_ascon_ascon_ETC___d194 =
		     { ascon_keyR[63:0], ascon_sipo_vec };
	     default: IF_ascon_inRecvType_2_EQ_12_4_THEN_ascon_ascon_ETC___d194 =
			  IF_ascon_inRecvType_2_EQ_5_6_OR_ascon_inRecvTy_ETC___d191;
	   endcase
	 end
  always @*
	 begin
	   case (lwc_pdiReceiver_fifof_D_OUT[31:28])
	     4'd4, 4'd5:
		 CASE_lwc_pdiReceiver_fifofD_OUT_BITS_31_TO_28_ETC__q6 =
		     !lwc_headersFifo_rv_port1__read[32];
	     default: CASE_lwc_pdiReceiver_fifofD_OUT_BITS_31_TO_28_ETC__q6 =
			  lwc_pdiReceiver_fifof_D_OUT[31:28] != 4'd7 ||
			  !lwc_pdiReceiver_fifof_D_OUT[24] ||
			  !lwc_headersFifo_rv_port1__read[32];
	   endcase
	 end

  // handling of inlined registers

  always @(posedge clk)
	 begin
	   if (rst == `BSV_RESET_VALUE)
	     begin
	       ascon_inState <= `BSV_ASSIGNMENT_DELAY 2'd0;
	       ascon_piso_countReg <= `BSV_ASSIGNMENT_DELAY 3'd0;
	       ascon_sipo_count_reg <= `BSV_ASSIGNMENT_DELAY 3'd0;
	       ascon_xState <= `BSV_ASSIGNMENT_DELAY 2'd0;
	       lwc_doSender_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	       lwc_doSender_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
		   { 1'd0,
		     32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	       lwc_doSender_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
		   { 1'd0,
		     32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	       lwc_headersFifo_rv <= `BSV_ASSIGNMENT_DELAY
		   { 1'd0,
		     32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	       lwc_inState <= `BSV_ASSIGNMENT_DELAY 4'd0;
	       lwc_outState <= `BSV_ASSIGNMENT_DELAY 2'd0;
	       lwc_statFailure <= `BSV_ASSIGNMENT_DELAY 1'd0;
	       lwc_tagFifo_rv <= `BSV_ASSIGNMENT_DELAY
		   { 1'd0,
		     32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	     end
	   else
	     begin
	       if (ascon_inState_EN)
		 ascon_inState <= `BSV_ASSIGNMENT_DELAY ascon_inState_D_IN;
	       if (ascon_piso_countReg_EN)
		 ascon_piso_countReg <= `BSV_ASSIGNMENT_DELAY
		     ascon_piso_countReg_D_IN;
	       if (ascon_sipo_count_reg_EN)
		 ascon_sipo_count_reg <= `BSV_ASSIGNMENT_DELAY
		     ascon_sipo_count_reg_D_IN;
	       if (ascon_xState_EN)
		 ascon_xState <= `BSV_ASSIGNMENT_DELAY ascon_xState_D_IN;
	       if (lwc_doSender_fifof_cntr_r_EN)
		 lwc_doSender_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY
		     lwc_doSender_fifof_cntr_r_D_IN;
	       if (lwc_doSender_fifof_q_0_EN)
		 lwc_doSender_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
		     lwc_doSender_fifof_q_0_D_IN;
	       if (lwc_doSender_fifof_q_1_EN)
		 lwc_doSender_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
		     lwc_doSender_fifof_q_1_D_IN;
	       if (lwc_headersFifo_rv_EN)
		 lwc_headersFifo_rv <= `BSV_ASSIGNMENT_DELAY
		     lwc_headersFifo_rv_D_IN;
	       if (lwc_inState_EN)
		 lwc_inState <= `BSV_ASSIGNMENT_DELAY lwc_inState_D_IN;
	       if (lwc_outState_EN)
		 lwc_outState <= `BSV_ASSIGNMENT_DELAY lwc_outState_D_IN;
	       if (lwc_statFailure_EN)
		 lwc_statFailure <= `BSV_ASSIGNMENT_DELAY
		     lwc_statFailure_D_IN;
	       if (lwc_tagFifo_rv_EN)
		 lwc_tagFifo_rv <= `BSV_ASSIGNMENT_DELAY lwc_tagFifo_rv_D_IN;
	     end
	   if (ascon_asconState_EN)
	     ascon_asconState <= `BSV_ASSIGNMENT_DELAY ascon_asconState_D_IN;
	   if (ascon_bdiValidBytes_EN)
	     ascon_bdiValidBytes <= `BSV_ASSIGNMENT_DELAY
		 ascon_bdiValidBytes_D_IN;
	   if (ascon_emitTag_EN)
	     ascon_emitTag <= `BSV_ASSIGNMENT_DELAY ascon_emitTag_D_IN;
	   if (ascon_finalADStep_EN)
	     ascon_finalADStep <= `BSV_ASSIGNMENT_DELAY
		 ascon_finalADStep_D_IN;
	   if (ascon_inEmptyType_EN)
	     ascon_inEmptyType <= `BSV_ASSIGNMENT_DELAY
		 ascon_inEmptyType_D_IN;
	   if (ascon_inLastBlockPadded_EN)
	     ascon_inLastBlockPadded <= `BSV_ASSIGNMENT_DELAY
		 ascon_inLastBlockPadded_D_IN;
	   if (ascon_inLastOfType_EN)
	     ascon_inLastOfType <= `BSV_ASSIGNMENT_DELAY
		 ascon_inLastOfType_D_IN;
	   if (ascon_inPadarg_EN)
	     ascon_inPadarg <= `BSV_ASSIGNMENT_DELAY ascon_inPadarg_D_IN;
	   if (ascon_inPaddedBlockZero_EN)
	     ascon_inPaddedBlockZero <= `BSV_ASSIGNMENT_DELAY
		 ascon_inPaddedBlockZero_D_IN;
	   if (ascon_inRecvType_EN)
	     ascon_inRecvType <= `BSV_ASSIGNMENT_DELAY ascon_inRecvType_D_IN;
	   if (ascon_initStep_EN)
	     ascon_initStep <= `BSV_ASSIGNMENT_DELAY ascon_initStep_D_IN;
	   if (ascon_keyR_EN)
	     ascon_keyR <= `BSV_ASSIGNMENT_DELAY ascon_keyR_D_IN;
	   if (ascon_outPadarg_EN)
	     ascon_outPadarg <= `BSV_ASSIGNMENT_DELAY ascon_outPadarg_D_IN;
	   if (ascon_piso_vec_EN)
	     ascon_piso_vec <= `BSV_ASSIGNMENT_DELAY ascon_piso_vec_D_IN;
	   if (ascon_roundCounter_EN)
	     ascon_roundCounter <= `BSV_ASSIGNMENT_DELAY
		 ascon_roundCounter_D_IN;
	   if (ascon_sipo_vec_EN)
	     ascon_sipo_vec <= `BSV_ASSIGNMENT_DELAY ascon_sipo_vec_D_IN;
	   if (lwc_finalRemainBytes_EN)
	     lwc_finalRemainBytes <= `BSV_ASSIGNMENT_DELAY
		 lwc_finalRemainBytes_D_IN;
	   if (lwc_inSegEoT_EN)
	     lwc_inSegEoT <= `BSV_ASSIGNMENT_DELAY lwc_inSegEoT_D_IN;
	   if (lwc_inSegLast_EN)
	     lwc_inSegLast <= `BSV_ASSIGNMENT_DELAY lwc_inSegLast_D_IN;
	   if (lwc_inSegType_EN)
	     lwc_inSegType <= `BSV_ASSIGNMENT_DELAY lwc_inSegType_D_IN;
	   if (lwc_inWordCounter_EN)
	     lwc_inWordCounter <= `BSV_ASSIGNMENT_DELAY
		 lwc_inWordCounter_D_IN;
	   if (lwc_outCounter_EN)
	     lwc_outCounter <= `BSV_ASSIGNMENT_DELAY lwc_outCounter_D_IN;
	   if (lwc_outRemainder_EN)
	     lwc_outRemainder <= `BSV_ASSIGNMENT_DELAY lwc_outRemainder_D_IN;
	   if (lwc_outSegLast_EN)
	     lwc_outSegLast <= `BSV_ASSIGNMENT_DELAY lwc_outSegLast_D_IN;
	   if (lwc_outSegType_EN)
	     lwc_outSegType <= `BSV_ASSIGNMENT_DELAY lwc_outSegType_D_IN;
	 end

  `ifdef YOSYS
  `elsif BSV_NO_INITIAL_BLOCKS
  `else
  // synopsys translate_off
  initial
  begin
    ascon_asconState =
	320'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ascon_bdiValidBytes = 3'h2;
    ascon_emitTag = 1'h0;
    ascon_finalADStep = 1'h0;
    ascon_inEmptyType = 1'h0;
    ascon_inLastBlockPadded = 1'h0;
    ascon_inLastOfType = 1'h0;
    ascon_inPadarg = 2'h2;
    ascon_inPaddedBlockZero = 1'h0;
    ascon_inRecvType = 4'hA;
    ascon_inState = 2'h2;
    ascon_initStep = 1'h0;
    ascon_keyR = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ascon_outPadarg = 2'h2;
    ascon_piso_countReg = 3'h2;
    ascon_piso_vec = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ascon_roundCounter = 4'hA;
    ascon_sipo_count_reg = 3'h2;
    ascon_sipo_vec = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ascon_xState = 2'h2;
    lwc_doSender_fifof_cntr_r = 2'h2;
    lwc_doSender_fifof_q_0 = 33'h0AAAAAAAA;
    lwc_doSender_fifof_q_1 = 33'h0AAAAAAAA;
    lwc_finalRemainBytes = 2'h2;
    lwc_headersFifo_rv = 33'h0AAAAAAAA;
    lwc_inSegEoT = 1'h0;
    lwc_inSegLast = 1'h0;
    lwc_inSegType = 4'hA;
    lwc_inState = 4'hA;
    lwc_inWordCounter = 14'h2AAA;
    lwc_outCounter = 14'h2AAA;
    lwc_outRemainder = 2'h2;
    lwc_outSegLast = 1'h0;
    lwc_outSegType = 4'hA;
    lwc_outState = 2'h2;
    lwc_statFailure = 1'h0;
    lwc_tagFifo_rv = 33'h0AAAAAAAA;
  end
  // synopsys translate_on
  `endif // BSV_NO_INITIAL_BLOCKS
endmodule  // lwc

