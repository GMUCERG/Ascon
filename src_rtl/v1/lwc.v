`define BSV_POSITIVE_RESET
`define BSV_NO_INITIAL_BLOCKS
//
// Generated by Bluespec Compiler (build 7d25cde)
//
// On Fri Jan  8 23:53:26 CET 2021
//
//
// Ports:
// Name                         I/O  size props
// pdi_ready                      O     1
// sdi_ready                      O     1
// do_data                        O    32 reg
// do_last                        O     1 reg
// do_valid                       O     1
// clk                            I     1 clock
// rst                            I     1 reset
// pdi_data                       I    32 reg
// pdi_valid                      I     1
// sdi_data                       I    32 reg
// sdi_valid                      I     1
// do_ready                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module lwc(clk,
	   rst,

	   pdi_data,

	   pdi_valid,

	   pdi_ready,

	   sdi_data,

	   sdi_valid,

	   sdi_ready,

	   do_data,

	   do_last,

	   do_valid,

	   do_ready);
  input  clk;
  input  rst;

  // action method pdi_data
  input  [31 : 0] pdi_data;

  // action method pdi_valid
  input  pdi_valid;

  // value method pdi_ready
  output pdi_ready;

  // action method sdi_data
  input  [31 : 0] sdi_data;

  // action method sdi_valid
  input  sdi_valid;

  // value method sdi_ready
  output sdi_ready;

  // value method do__data
  output [31 : 0] do_data;

  // value method do__last
  output do_last;

  // value method do__valid
  output do_valid;

  // action method do__ready
  input  do_ready;

  // signals for module outputs
  wire [31 : 0] do_data;
  wire do_last, do_valid, pdi_ready, sdi_ready;

  // inlined wires
  wire [32 : 0] lwc_headersFifo_rv$port1__read,
		lwc_headersFifo_rv$port1__write_1,
		lwc_headersFifo_rv$port2__read,
		lwc_tagFifo_rv$port1__read,
		lwc_tagFifo_rv$port1__write_1,
		lwc_tagFifo_rv$port2__read;
  wire lwc_doSender_fifof_dequeueing$whas,
       lwc_doSender_fifof_enqueueing$whas,
       lwc_doSender_fifof_x_wire$whas,
       lwc_headersFifo_rv$EN_port1__write,
       lwc_pdiReceiver_deq_pw$whas,
       lwc_sdiReceiver_deq_pw$whas;

  // register ascon_asconState
  reg [319 : 0] ascon_asconState;
  wire [319 : 0] ascon_asconState$D_IN;
  wire ascon_asconState$EN;

  // register ascon_bdiValidBytes
  reg [2 : 0] ascon_bdiValidBytes;
  wire [2 : 0] ascon_bdiValidBytes$D_IN;
  wire ascon_bdiValidBytes$EN;

  // register ascon_emitTag
  reg ascon_emitTag;
  wire ascon_emitTag$D_IN, ascon_emitTag$EN;

  // register ascon_finalADStep
  reg ascon_finalADStep;
  wire ascon_finalADStep$D_IN, ascon_finalADStep$EN;

  // register ascon_inEmptyType
  reg ascon_inEmptyType;
  wire ascon_inEmptyType$D_IN, ascon_inEmptyType$EN;

  // register ascon_inLastBlockPadded
  reg ascon_inLastBlockPadded;
  wire ascon_inLastBlockPadded$D_IN, ascon_inLastBlockPadded$EN;

  // register ascon_inLastOfType
  reg ascon_inLastOfType;
  wire ascon_inLastOfType$D_IN, ascon_inLastOfType$EN;

  // register ascon_inPadarg
  reg [1 : 0] ascon_inPadarg;
  wire [1 : 0] ascon_inPadarg$D_IN;
  wire ascon_inPadarg$EN;

  // register ascon_inPaddedBlockZero
  reg ascon_inPaddedBlockZero;
  wire ascon_inPaddedBlockZero$D_IN, ascon_inPaddedBlockZero$EN;

  // register ascon_inRecvType
  reg [3 : 0] ascon_inRecvType;
  wire [3 : 0] ascon_inRecvType$D_IN;
  wire ascon_inRecvType$EN;

  // register ascon_inState
  reg [1 : 0] ascon_inState;
  reg [1 : 0] ascon_inState$D_IN;
  wire ascon_inState$EN;

  // register ascon_initStep
  reg ascon_initStep;
  wire ascon_initStep$D_IN, ascon_initStep$EN;

  // register ascon_keyR
  reg [127 : 0] ascon_keyR;
  wire [127 : 0] ascon_keyR$D_IN;
  wire ascon_keyR$EN;

  // register ascon_outPadarg
  reg [1 : 0] ascon_outPadarg;
  wire [1 : 0] ascon_outPadarg$D_IN;
  wire ascon_outPadarg$EN;

  // register ascon_piso_countReg
  reg [2 : 0] ascon_piso_countReg;
  reg [2 : 0] ascon_piso_countReg$D_IN;
  wire ascon_piso_countReg$EN;

  // register ascon_piso_vec
  reg [127 : 0] ascon_piso_vec;
  reg [127 : 0] ascon_piso_vec$D_IN;
  wire ascon_piso_vec$EN;

  // register ascon_roundCounter
  reg [3 : 0] ascon_roundCounter;
  wire [3 : 0] ascon_roundCounter$D_IN;
  wire ascon_roundCounter$EN;

  // register ascon_sipo_count_reg
  reg [2 : 0] ascon_sipo_count_reg;
  wire [2 : 0] ascon_sipo_count_reg$D_IN;
  wire ascon_sipo_count_reg$EN;

  // register ascon_sipo_vec
  reg [127 : 0] ascon_sipo_vec;
  reg [127 : 0] ascon_sipo_vec$D_IN;
  wire ascon_sipo_vec$EN;

  // register ascon_xState
  reg [1 : 0] ascon_xState;
  reg [1 : 0] ascon_xState$D_IN;
  wire ascon_xState$EN;

  // register lwc_doSender_fifof_cntr_r
  reg [1 : 0] lwc_doSender_fifof_cntr_r;
  wire [1 : 0] lwc_doSender_fifof_cntr_r$D_IN;
  wire lwc_doSender_fifof_cntr_r$EN;

  // register lwc_doSender_fifof_q_0
  reg [32 : 0] lwc_doSender_fifof_q_0;
  reg [32 : 0] lwc_doSender_fifof_q_0$D_IN;
  wire lwc_doSender_fifof_q_0$EN;

  // register lwc_doSender_fifof_q_1
  reg [32 : 0] lwc_doSender_fifof_q_1;
  reg [32 : 0] lwc_doSender_fifof_q_1$D_IN;
  wire lwc_doSender_fifof_q_1$EN;

  // register lwc_finalRemainBytes
  reg [1 : 0] lwc_finalRemainBytes;
  wire [1 : 0] lwc_finalRemainBytes$D_IN;
  wire lwc_finalRemainBytes$EN;

  // register lwc_headersFifo_rv
  reg [32 : 0] lwc_headersFifo_rv;
  wire [32 : 0] lwc_headersFifo_rv$D_IN;
  wire lwc_headersFifo_rv$EN;

  // register lwc_inSegEoT
  reg lwc_inSegEoT;
  wire lwc_inSegEoT$D_IN, lwc_inSegEoT$EN;

  // register lwc_inSegLast
  reg lwc_inSegLast;
  wire lwc_inSegLast$D_IN, lwc_inSegLast$EN;

  // register lwc_inSegType
  reg [3 : 0] lwc_inSegType;
  wire [3 : 0] lwc_inSegType$D_IN;
  wire lwc_inSegType$EN;

  // register lwc_inState
  reg [3 : 0] lwc_inState;
  reg [3 : 0] lwc_inState$D_IN;
  wire lwc_inState$EN;

  // register lwc_inWordCounter
  reg [13 : 0] lwc_inWordCounter;
  reg [13 : 0] lwc_inWordCounter$D_IN;
  wire lwc_inWordCounter$EN;

  // register lwc_outCounter
  reg [13 : 0] lwc_outCounter;
  reg [13 : 0] lwc_outCounter$D_IN;
  wire lwc_outCounter$EN;

  // register lwc_outRemainder
  reg [1 : 0] lwc_outRemainder;
  wire [1 : 0] lwc_outRemainder$D_IN;
  wire lwc_outRemainder$EN;

  // register lwc_outSegLast
  reg lwc_outSegLast;
  wire lwc_outSegLast$D_IN, lwc_outSegLast$EN;

  // register lwc_outSegType
  reg [3 : 0] lwc_outSegType;
  reg [3 : 0] lwc_outSegType$D_IN;
  wire lwc_outSegType$EN;

  // register lwc_outState
  reg [1 : 0] lwc_outState;
  reg [1 : 0] lwc_outState$D_IN;
  wire lwc_outState$EN;

  // register lwc_statFailure
  reg lwc_statFailure;
  wire lwc_statFailure$D_IN, lwc_statFailure$EN;

  // register lwc_tagFifo_rv
  reg [32 : 0] lwc_tagFifo_rv;
  wire [32 : 0] lwc_tagFifo_rv$D_IN;
  wire lwc_tagFifo_rv$EN;

  // ports of submodule lwc_pdiReceiver_fifof
  wire [31 : 0] lwc_pdiReceiver_fifof$D_IN, lwc_pdiReceiver_fifof$D_OUT;
  wire lwc_pdiReceiver_fifof$CLR,
       lwc_pdiReceiver_fifof$DEQ,
       lwc_pdiReceiver_fifof$EMPTY_N,
       lwc_pdiReceiver_fifof$ENQ,
       lwc_pdiReceiver_fifof$FULL_N;

  // ports of submodule lwc_sdiReceiver_fifof
  wire [31 : 0] lwc_sdiReceiver_fifof$D_IN, lwc_sdiReceiver_fifof$D_OUT;
  wire lwc_sdiReceiver_fifof$CLR,
       lwc_sdiReceiver_fifof$DEQ,
       lwc_sdiReceiver_fifof$EMPTY_N,
       lwc_sdiReceiver_fifof$ENQ,
       lwc_sdiReceiver_fifof$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_ascon_rl_absorb_squeeze,
       WILL_FIRE_RL_ascon_rl_fill_zero,
       WILL_FIRE_RL_ascon_rl_output_tag,
       WILL_FIRE_RL_lwc_doSender_fifof_both,
       WILL_FIRE_RL_lwc_doSender_fifof_decCtr,
       WILL_FIRE_RL_lwc_doSender_fifof_incCtr,
       WILL_FIRE_RL_lwc_rl_enq_tag,
       WILL_FIRE_RL_lwc_rl_feed_core_pdi,
       WILL_FIRE_RL_lwc_rl_feed_core_sdi,
       WILL_FIRE_RL_lwc_rl_get_pdi_hdr,
       WILL_FIRE_RL_lwc_rl_get_sdi_hdr,
       WILL_FIRE_RL_lwc_rl_get_sdi_inst,
       WILL_FIRE_RL_lwc_rl_get_tag_data,
       WILL_FIRE_RL_lwc_rl_get_tag_hdr,
       WILL_FIRE_RL_lwc_rl_out_header,
       WILL_FIRE_RL_lwc_rl_out_status,
       WILL_FIRE_RL_lwc_rl_pdi_instruction,
       WILL_FIRE_RL_lwc_rl_sendout_data,
       WILL_FIRE_RL_lwc_rl_verify_tag;

  // inputs to muxes for submodule ports
  reg [127 : 0] MUX_ascon_piso_vec$write_1__VAL_2;
  reg [32 : 0] MUX_lwc_doSender_fifof_q_0$write_1__VAL_1,
	       MUX_lwc_headersFifo_rv$port1__write_1__VAL_1;
  reg [3 : 0] MUX_ascon_inRecvType$write_1__VAL_1,
	      MUX_ascon_inRecvType$write_1__VAL_2,
	      MUX_ascon_roundCounter$write_1__VAL_2;
  reg [2 : 0] MUX_ascon_piso_countReg$write_1__VAL_2;
  reg [1 : 0] MUX_ascon_inState$write_1__VAL_3;
  wire [319 : 0] MUX_ascon_asconState$write_1__VAL_1,
		 MUX_ascon_asconState$write_1__VAL_2;
  wire [127 : 0] MUX_ascon_piso_vec$write_1__VAL_1,
		 MUX_ascon_sipo_vec$write_1__VAL_1,
		 MUX_ascon_sipo_vec$write_1__VAL_2,
		 MUX_ascon_sipo_vec$write_1__VAL_3;
  wire [32 : 0] MUX_lwc_doSender_fifof_q_0$write_1__VAL_2,
		MUX_lwc_doSender_fifof_q_1$write_1__VAL_2,
		MUX_lwc_doSender_fifof_q_1$write_1__VAL_3,
		MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_1,
		MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_2,
		MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_3;
  wire [13 : 0] MUX_lwc_inWordCounter$write_1__VAL_1,
		MUX_lwc_outCounter$write_1__VAL_1,
		MUX_lwc_outCounter$write_1__VAL_2;
  wire [3 : 0] MUX_ascon_roundCounter$write_1__VAL_1,
	       MUX_lwc_inState$write_1__VAL_2,
	       MUX_lwc_inState$write_1__VAL_3,
	       MUX_lwc_inState$write_1__VAL_5;
  wire [2 : 0] MUX_ascon_piso_countReg$write_1__VAL_1,
	       MUX_ascon_sipo_count_reg$write_1__VAL_1;
  wire [1 : 0] MUX_ascon_inState$write_1__VAL_2,
	       MUX_ascon_inState$write_1__VAL_4,
	       MUX_ascon_inState$write_1__VAL_5,
	       MUX_ascon_xState$write_1__VAL_2,
	       MUX_lwc_doSender_fifof_cntr_r$write_1__VAL_2,
	       MUX_lwc_outState$write_1__VAL_2,
	       MUX_lwc_outState$write_1__VAL_3;
  wire MUX_ascon_asconState$write_1__SEL_1,
       MUX_ascon_emitTag$write_1__SEL_1,
       MUX_ascon_emitTag$write_1__VAL_1,
       MUX_ascon_finalADStep$write_1__SEL_1,
       MUX_ascon_inLastBlockPadded$write_1__SEL_1,
       MUX_ascon_inLastBlockPadded$write_1__VAL_2,
       MUX_ascon_inPaddedBlockZero$write_1__VAL_1,
       MUX_ascon_inState$write_1__PSEL_2,
       MUX_ascon_inState$write_1__SEL_1,
       MUX_ascon_inState$write_1__SEL_2,
       MUX_ascon_initStep$write_1__SEL_1,
       MUX_ascon_outPadarg$write_1__SEL_1,
       MUX_ascon_piso_countReg$write_1__SEL_1,
       MUX_ascon_roundCounter$write_1__SEL_1,
       MUX_ascon_roundCounter$write_1__SEL_2,
       MUX_ascon_sipo_count_reg$write_1__SEL_1,
       MUX_ascon_xState$write_1__SEL_2,
       MUX_lwc_doSender_fifof_q_0$write_1__SEL_1,
       MUX_lwc_doSender_fifof_q_0$write_1__SEL_2,
       MUX_lwc_doSender_fifof_q_1$write_1__SEL_1,
       MUX_lwc_doSender_fifof_q_1$write_1__SEL_2,
       MUX_lwc_headersFifo_rv$port1__write_1__SEL_1,
       MUX_lwc_inState$write_1__SEL_1,
       MUX_lwc_inState$write_1__SEL_2,
       MUX_lwc_inState$write_1__SEL_3,
       MUX_lwc_inState$write_1__SEL_4,
       MUX_lwc_inWordCounter$write_1__SEL_1,
       MUX_lwc_inWordCounter$write_1__SEL_3,
       MUX_lwc_outCounter$write_1__SEL_1,
       MUX_lwc_outCounter$write_1__SEL_2,
       MUX_lwc_outState$write_1__SEL_1,
       MUX_lwc_outState$write_1__SEL_2,
       MUX_lwc_outState$write_1__SEL_3,
       MUX_lwc_statFailure$write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h767;
  reg [63 : 0] v__h1697;
  reg [63 : 0] v__h2755;
  reg [63 : 0] v__h2863;
  reg [63 : 0] v__h3022;
  reg [63 : 0] v__h3212;
  reg [63 : 0] v__h5452;
  reg [63 : 0] v__h6031;
  reg [63 : 0] v__h6230;
  reg [63 : 0] v__h9820;
  // synopsys translate_on

  // remaining internal signals
  reg [191 : 0] IF_ascon_inRecvType_3_EQ_12_5_THEN_ascon_ascon_ETC___d146;
  reg [63 : 0] CASE_ascon_inRecvType_4_x1_avValue_fst_x2052_5_ETC__q3,
	       CASE_ascon_inRecvType_4_x1_avValue_fst_x3053_5_ETC__q4,
	       x1_avValue_fst_x0__h4058,
	       x1_avValue_fst_x1__h4059;
  reg [31 : 0] IF_ascon_outPadarg_15_EQ_0_16_THEN_ascon_piso__ETC___d627,
	       IF_lwc_finalRemainBytes_84_EQ_0_92_THEN_lwc_pd_ETC___d534,
	       IF_lwc_finalRemainBytes_84_EQ_0_92_THEN_lwc_sd_ETC___d506;
  reg [7 : 0] CASE_ascon_roundCounter_52_MINUS_1_79_0_0x4B_1_ETC__q1,
	      CASE_x480_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2;
  reg CASE_lwc_pdiReceiver_fifofD_OUT_BITS_31_TO_28_ETC__q5;
  wire [319 : 0] IF_ascon_finalADStep_59_THEN_ascon_asconState__ETC___d319,
		 IF_ascon_initStep_57_THEN_ascon_asconState_2_B_ETC___d320,
		 IF_ascon_roundCounter_52_EQ_0_53_THEN_IF_ascon_ETC___d321;
  wire [191 : 0] IF_ascon_inRecvType_3_EQ_5_7_OR_ascon_inRecvTy_ETC___d143;
  wire [127 : 0] IF_ascon_inEmptyType_2_THEN_ascon_asconState_2_ETC___d94;
  wire [63 : 0] INV_ascon_asconState_2_BITS_191_TO_136_76_CONC_ETC___d232,
		newState___1_x2__h4030,
		newState_x0__h2967,
		newState_x1__h2968,
		newState_x3__h3142,
		newState_x4__h2213,
		state_x0__h8267,
		state_x0__h8330,
		state_x0__h8402,
		state_x1__h8278,
		state_x1__h8413,
		state_x2__h8264,
		state_x2__h8322,
		state_x2__h8399,
		state_x2__h8457,
		state_x3__h6663,
		state_x3__h8275,
		state_x3__h8328,
		state_x4__h6582,
		state_x4__h6659,
		state_x4__h8271,
		t0__h6635,
		t0__h8247,
		t1__h8248,
		x1_avValue_fst_x2__h4042,
		x1_avValue_fst_x2__h4047,
		x1_avValue_fst_x2__h4052,
		x1_avValue_fst_x3__h4043,
		x1_avValue_fst_x3__h4048,
		x1_avValue_fst_x3__h4053,
		x1_avValue_x0__h2980,
		x1_avValue_x1__h2981,
		x1_avValue_x4__h2984,
		x__h4500,
		x__h4546,
		x__h5511,
		x__h5533,
		x__h6723,
		x__h6979,
		x__h6981,
		x__h7081,
		x__h7339,
		x__h7548,
		x__h8195,
		x__h8241,
		x__h8376,
		x__h8596,
		x__h8781,
		x__h8795,
		x__h8810,
		x__h8813,
		x__h8938,
		x__h8956,
		x__h9134,
		x__h9147,
		x__h9164,
		x__h9250,
		x__h9251,
		x__h9337,
		x__h9349,
		x__h9364,
		x__h9367,
		x__h9453,
		x__h9465,
		x__h9480,
		x__h9483,
		x__h9569,
		x__h9581,
		x__h9596,
		x__h9598,
		x__h9684,
		x__h9698,
		y__h6980,
		y__h7080,
		y__h7082,
		y__h7338,
		y__h7547,
		y__h8242,
		y__h8314,
		y__h8377,
		y__h8449,
		y__h8471,
		y__h8597,
		y__h8782,
		y__h8796,
		y__h8809,
		y__h8814,
		y__h8939,
		y__h8957,
		y__h9135,
		y__h9148,
		y__h9165,
		y__h9252,
		y__h9350,
		y__h9363,
		y__h9368,
		y__h9466,
		y__h9479,
		y__h9484,
		y__h9582,
		y__h9595,
		y__h9599,
		y__h9697,
		y__h9699;
  wire [31 : 0] b__h15559,
		b__h15566,
		b__h15569,
		b__h16515,
		b__h16522,
		b__h16525,
		b__h18803,
		b__h18810,
		b__h18813,
		x__h18779;
  wire [13 : 0] x__h18996;
  wire [7 : 0] spliced_bits__h8475, spliced_bits__h8901;
  wire [3 : 0] IF_ascon_inEmptyType_2_THEN_12_ELSE_IF_ascon_i_ETC___d38,
	       IF_lwc_inSegType_37_EQ_5_40_AND_lwc_inSegEoT_8_ETC___d544,
	       ascon_roundCounter_52_MINUS_1___d179,
	       x__h7480;
  wire [2 : 0] IF_ascon_inEmptyType_2_THEN_0_ELSE_IF_ascon_in_ETC___d106,
	       IF_ascon_inLastBlockPadded_4_THEN_IF_ascon_inP_ETC___d104;
  wire [1 : 0] IF_ascon_inEmptyType_2_THEN_0_ELSE_IF_ascon_in_ETC___d27,
	       lwc_doSender_fifof_cntr_r_71_MINUS_1___d380;
  wire NOT_ascon_roundCounter_52_EQ_0_53_70_OR_ascon__ETC___d173,
       NOT_lwc_outCounter_03_BITS_13_TO_1_08_EQ_0_09__ETC___d641,
       NOT_lwc_tagFifo_rv_port0__read__94_BITS_31_TO__ETC___d607,
       _dand2ascon_inState$EN_write,
       _dfoo1,
       _dfoo3,
       ascon_inRecvType_3_EQ_1_9_AND_NOT_ascon_inEmpt_ETC___d45,
       ascon_inRecvType_3_EQ_1_9_AND_NOT_ascon_inEmpt_ETC___d71,
       ascon_inRecvType_3_EQ_1_9_AND_ascon_inEmptyTyp_ETC___d50,
       ascon_inRecvType_3_EQ_4_8_AND_NOT_ascon_inEmpt_ETC___d44,
       ascon_inRecvType_3_EQ_5_7_AND_NOT_ascon_inEmpt_ETC___d43,
       ascon_roundCounter_52_EQ_0_53_AND_ascon_emitTa_ETC___d334,
       ascon_roundCounter_52_EQ_2_54_AND_NOT_ascon_em_ETC___d163,
       lwc_inWordCounter_82_BITS_13_TO_1_85_EQ_0_86_A_ETC___d495;

  // value method pdi_ready
  assign pdi_ready =
	     lwc_pdiReceiver_fifof$FULL_N || lwc_pdiReceiver_deq_pw$whas ;

  // value method sdi_ready
  assign sdi_ready =
	     lwc_sdiReceiver_fifof$FULL_N || lwc_sdiReceiver_deq_pw$whas ;

  // value method do__data
  assign do_data = lwc_doSender_fifof_q_0[31:0] ;

  // value method do__last
  assign do_last = lwc_doSender_fifof_q_0[32] ;

  // value method do__valid
  assign do_valid = lwc_doSender_fifof_cntr_r != 2'd0 ;

  // submodule lwc_pdiReceiver_fifof
  FIFOL1 #(.width(32'd32)) lwc_pdiReceiver_fifof(.RST(rst),
						 .CLK(clk),
						 .D_IN(lwc_pdiReceiver_fifof$D_IN),
						 .ENQ(lwc_pdiReceiver_fifof$ENQ),
						 .DEQ(lwc_pdiReceiver_fifof$DEQ),
						 .CLR(lwc_pdiReceiver_fifof$CLR),
						 .D_OUT(lwc_pdiReceiver_fifof$D_OUT),
						 .FULL_N(lwc_pdiReceiver_fifof$FULL_N),
						 .EMPTY_N(lwc_pdiReceiver_fifof$EMPTY_N));

  // submodule lwc_sdiReceiver_fifof
  FIFOL1 #(.width(32'd32)) lwc_sdiReceiver_fifof(.RST(rst),
						 .CLK(clk),
						 .D_IN(lwc_sdiReceiver_fifof$D_IN),
						 .ENQ(lwc_sdiReceiver_fifof$ENQ),
						 .DEQ(lwc_sdiReceiver_fifof$DEQ),
						 .CLR(lwc_sdiReceiver_fifof$CLR),
						 .D_OUT(lwc_sdiReceiver_fifof$D_OUT),
						 .FULL_N(lwc_sdiReceiver_fifof$FULL_N),
						 .EMPTY_N(lwc_sdiReceiver_fifof$EMPTY_N));

  // rule RL_ascon_rl_absorb_squeeze
  assign WILL_FIRE_RL_ascon_rl_absorb_squeeze =
	     ascon_sipo_count_reg == 3'd4 && ascon_piso_countReg == 3'd0 &&
	     ascon_inState == 2'd3 &&
	     ascon_xState == 2'd0 ;

  // rule RL_ascon_rl_output_tag
  assign WILL_FIRE_RL_ascon_rl_output_tag =
	     ascon_piso_countReg == 3'd0 && ascon_xState == 2'd2 ;

  // rule RL_ascon_rl_fill_zero
  assign WILL_FIRE_RL_ascon_rl_fill_zero =
	     ascon_sipo_count_reg != 3'd4 && ascon_inState == 2'd2 ;

  // rule RL_lwc_rl_pdi_instruction
  assign WILL_FIRE_RL_lwc_rl_pdi_instruction =
	     lwc_inState == 4'd0 && lwc_pdiReceiver_fifof$EMPTY_N ;

  // rule RL_lwc_rl_get_sdi_inst
  assign WILL_FIRE_RL_lwc_rl_get_sdi_inst =
	     lwc_inState == 4'd1 && lwc_sdiReceiver_fifof$EMPTY_N ;

  // rule RL_lwc_rl_get_sdi_hdr
  assign WILL_FIRE_RL_lwc_rl_get_sdi_hdr =
	     ascon_inState == 2'd0 && lwc_inState == 4'd3 &&
	     lwc_sdiReceiver_fifof$EMPTY_N ;

  // rule RL_lwc_rl_get_tag_hdr
  assign WILL_FIRE_RL_lwc_rl_get_tag_hdr =
	     lwc_inState == 4'd5 && lwc_pdiReceiver_fifof$EMPTY_N ;

  // rule RL_lwc_rl_out_header
  assign WILL_FIRE_RL_lwc_rl_out_header =
	     lwc_doSender_fifof_cntr_r != 2'd2 && lwc_outState == 2'd0 &&
	     lwc_headersFifo_rv[32] ;

  // rule RL_lwc_rl_get_pdi_hdr
  assign WILL_FIRE_RL_lwc_rl_get_pdi_hdr =
	     ascon_inState == 2'd0 && lwc_inState == 4'd2 &&
	     lwc_pdiReceiver_fifof$EMPTY_N &&
	     CASE_lwc_pdiReceiver_fifofD_OUT_BITS_31_TO_28_ETC__q5 ;

  // rule RL_lwc_rl_enq_tag
  assign WILL_FIRE_RL_lwc_rl_enq_tag =
	     lwc_inState == 4'd7 && !lwc_headersFifo_rv$port1__read[32] ;

  // rule RL_lwc_rl_verify_tag
  assign WILL_FIRE_RL_lwc_rl_verify_tag =
	     ascon_piso_countReg != 3'd0 && lwc_outState == 2'd2 &&
	     lwc_tagFifo_rv[32] ;

  // rule RL_lwc_rl_get_tag_data
  assign WILL_FIRE_RL_lwc_rl_get_tag_data =
	     lwc_inState == 4'd6 && !lwc_tagFifo_rv$port1__read[32] &&
	     lwc_pdiReceiver_fifof$EMPTY_N ;

  // rule RL_lwc_rl_sendout_data
  assign WILL_FIRE_RL_lwc_rl_sendout_data =
	     lwc_doSender_fifof_cntr_r != 2'd2 &&
	     ascon_piso_countReg != 3'd0 &&
	     lwc_outState == 2'd1 ;

  // rule RL_lwc_rl_feed_core_sdi
  assign WILL_FIRE_RL_lwc_rl_feed_core_sdi =
	     ascon_sipo_count_reg != 3'd4 && ascon_inState == 2'd1 &&
	     lwc_inState == 4'd8 &&
	     lwc_sdiReceiver_fifof$EMPTY_N ;

  // rule RL_lwc_rl_feed_core_pdi
  assign WILL_FIRE_RL_lwc_rl_feed_core_pdi =
	     ascon_sipo_count_reg != 3'd4 && ascon_inState == 2'd1 &&
	     lwc_inState == 4'd4 &&
	     lwc_pdiReceiver_fifof$EMPTY_N ;

  // rule RL_lwc_rl_out_status
  assign WILL_FIRE_RL_lwc_rl_out_status =
	     lwc_doSender_fifof_cntr_r != 2'd2 && lwc_outState == 2'd3 ;

  // rule RL_lwc_doSender_fifof_incCtr
  assign WILL_FIRE_RL_lwc_doSender_fifof_incCtr =
	     lwc_doSender_fifof_enqueueing$whas &&
	     !lwc_doSender_fifof_dequeueing$whas &&
	     lwc_doSender_fifof_x_wire$whas ;

  // rule RL_lwc_doSender_fifof_decCtr
  assign WILL_FIRE_RL_lwc_doSender_fifof_decCtr =
	     !lwc_doSender_fifof_enqueueing$whas &&
	     lwc_doSender_fifof_dequeueing$whas ;

  // rule RL_lwc_doSender_fifof_both
  assign WILL_FIRE_RL_lwc_doSender_fifof_both =
	     lwc_doSender_fifof_enqueueing$whas &&
	     lwc_doSender_fifof_dequeueing$whas &&
	     lwc_doSender_fifof_x_wire$whas ;

  // inputs to muxes for submodule ports
  assign MUX_ascon_asconState$write_1__SEL_1 =
	     ascon_xState == 2'd1 &&
	     NOT_ascon_roundCounter_52_EQ_0_53_70_OR_ascon__ETC___d173 ;
  assign MUX_ascon_emitTag$write_1__SEL_1 =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     (ascon_inRecvType == 4'd5 || ascon_inRecvType == 4'd4) ;
  assign MUX_ascon_finalADStep$write_1__SEL_1 =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     ascon_inRecvType_3_EQ_1_9_AND_ascon_inEmptyTyp_ETC___d50 ;
  assign MUX_ascon_inLastBlockPadded$write_1__SEL_1 =
	     WILL_FIRE_RL_ascon_rl_fill_zero &&
	     (ascon_sipo_count_reg == 3'd0 ||
	      !ascon_inLastBlockPadded && ascon_inLastOfType) ;
  assign MUX_ascon_inState$write_1__SEL_1 =
	     WILL_FIRE_RL_ascon_rl_fill_zero && ascon_sipo_count_reg[1] &&
	     ascon_sipo_count_reg[0] ;
  assign MUX_ascon_inState$write_1__PSEL_2 =
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi ||
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi ;
  assign MUX_ascon_inState$write_1__SEL_2 =
	     MUX_ascon_inState$write_1__PSEL_2 &&
	     (ascon_sipo_count_reg[1] && ascon_sipo_count_reg[0] ||
	      lwc_inWordCounter_82_BITS_13_TO_1_85_EQ_0_86_A_ETC___d495) ;
  assign MUX_ascon_initStep$write_1__SEL_1 =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     ascon_inRecvType == 4'd13 ;
  assign MUX_ascon_outPadarg$write_1__SEL_1 =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     (ascon_inRecvType_3_EQ_5_7_AND_NOT_ascon_inEmpt_ETC___d43 ||
	      ascon_inRecvType_3_EQ_4_8_AND_NOT_ascon_inEmpt_ETC___d44) ;
  assign MUX_ascon_piso_countReg$write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_rl_sendout_data ||
	     WILL_FIRE_RL_lwc_rl_verify_tag ;
  assign MUX_ascon_roundCounter$write_1__SEL_1 =
	     ascon_xState == 2'd1 && ascon_roundCounter != 4'd0 ;
  assign MUX_ascon_roundCounter$write_1__SEL_2 =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     (ascon_inRecvType == 4'd13 || ascon_inRecvType == 4'd5 ||
	      ascon_inRecvType == 4'd4 ||
	      ascon_inRecvType == 4'd1 && !ascon_inEmptyType) ;
  assign MUX_ascon_sipo_count_reg$write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi ||
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi ||
	     WILL_FIRE_RL_ascon_rl_fill_zero ;
  assign MUX_ascon_xState$write_1__SEL_2 =
	     ascon_xState == 2'd1 &&
	     (ascon_roundCounter == 4'd0 ||
	      ascon_roundCounter_52_EQ_2_54_AND_NOT_ascon_em_ETC___d163) ;
  assign MUX_lwc_doSender_fifof_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_doSender_fifof_incCtr &&
	     lwc_doSender_fifof_cntr_r == 2'd0 ;
  assign MUX_lwc_doSender_fifof_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_doSender_fifof_both && _dfoo3 ;
  assign MUX_lwc_doSender_fifof_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_doSender_fifof_incCtr &&
	     lwc_doSender_fifof_cntr_r == 2'd1 ;
  assign MUX_lwc_doSender_fifof_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_doSender_fifof_both && _dfoo1 ;
  assign MUX_lwc_headersFifo_rv$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr &&
	     (lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd5 ||
	      lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd4 ||
	      lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd7 &&
	      lwc_pdiReceiver_fifof$D_OUT[24]) ;
  assign MUX_lwc_inState$write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_rl_get_tag_data &&
	     lwc_inWordCounter[13:1] == 13'd0 ;
  assign MUX_lwc_inState$write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr &&
	     (lwc_pdiReceiver_fifof$D_OUT[15:0] != 16'd0 ||
	      lwc_pdiReceiver_fifof$D_OUT[24] ||
	      lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd5 &&
	      lwc_pdiReceiver_fifof$D_OUT[25]) ;
  assign MUX_lwc_inState$write_1__SEL_3 =
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi &&
	     (lwc_inWordCounter[13:1] == 13'd0 && !lwc_inWordCounter[0] ||
	      lwc_finalRemainBytes == 2'd0 &&
	      lwc_inWordCounter[13:1] == 13'd0) ;
  assign MUX_lwc_inState$write_1__SEL_4 =
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi &&
	     (lwc_inWordCounter[13:1] == 13'd0 && !lwc_inWordCounter[0] ||
	      lwc_finalRemainBytes == 2'd0 &&
	      lwc_inWordCounter[13:1] == 13'd0) ;
  assign MUX_lwc_inWordCounter$write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_rl_get_tag_data ||
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi ||
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi ;
  assign MUX_lwc_inWordCounter$write_1__SEL_3 =
	     WILL_FIRE_RL_lwc_rl_get_tag_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ;
  assign MUX_lwc_outCounter$write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_rl_out_header &&
	     (lwc_headersFifo_rv[15:0] != 16'd0 ||
	      lwc_headersFifo_rv[31:28] == 4'd4) ;
  assign MUX_lwc_outCounter$write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_rl_sendout_data &&
	     NOT_lwc_outCounter_03_BITS_13_TO_1_08_EQ_0_09__ETC___d641 ;
  assign MUX_lwc_outState$write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_rl_verify_tag && lwc_outCounter[13:1] == 13'd0 ;
  assign MUX_lwc_outState$write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_rl_sendout_data &&
	     (lwc_outCounter[13:1] == 13'd0 && !lwc_outCounter[0] ||
	      lwc_outRemainder == 2'd0 && lwc_outCounter[13:1] == 13'd0) ;
  assign MUX_lwc_outState$write_1__SEL_3 =
	     WILL_FIRE_RL_lwc_rl_out_header &&
	     (lwc_headersFifo_rv[15:0] != 16'd0 || lwc_headersFifo_rv[24] ||
	      lwc_headersFifo_rv[31:28] == 4'd4) ;
  assign MUX_lwc_statFailure$write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_rl_verify_tag &&
	     NOT_lwc_tagFifo_rv_port0__read__94_BITS_31_TO__ETC___d607 ;
  assign MUX_ascon_asconState$write_1__VAL_1 =
	     ascon_roundCounter_52_EQ_2_54_AND_NOT_ascon_em_ETC___d163 ?
	       { x__h8195, x__h9337, x__h9453, x__h9569, x__h9684 } :
	       IF_ascon_roundCounter_52_EQ_0_53_THEN_IF_ascon_ETC___d321 ;
  assign MUX_ascon_asconState$write_1__VAL_2 =
	     { x__h4500,
	       x__h4546,
	       IF_ascon_inRecvType_3_EQ_12_5_THEN_ascon_ascon_ETC___d146 } ;
  assign MUX_ascon_emitTag$write_1__VAL_1 =
	     ascon_inEmptyType ||
	     ascon_inLastOfType && ascon_inLastBlockPadded ;
  assign MUX_ascon_inLastBlockPadded$write_1__VAL_2 =
	     lwc_finalRemainBytes != 2'd0 &&
	     lwc_inWordCounter[13:1] == 13'd0 &&
	     !lwc_inWordCounter[0] &&
	     lwc_inSegEoT ;
  assign MUX_ascon_inPaddedBlockZero$write_1__VAL_1 =
	     !ascon_inEmptyType && ascon_sipo_count_reg == 3'd0 ;
  always@(lwc_pdiReceiver_fifof$D_OUT)
  begin
    case (lwc_pdiReceiver_fifof$D_OUT[31:28])
      4'd1, 4'd4, 4'd5, 4'd7, 4'd8, 4'd12, 4'd13:
	  MUX_ascon_inRecvType$write_1__VAL_1 =
	      lwc_pdiReceiver_fifof$D_OUT[31:28];
      default: MUX_ascon_inRecvType$write_1__VAL_1 = 4'd9;
    endcase
  end
  always@(lwc_sdiReceiver_fifof$D_OUT)
  begin
    case (lwc_sdiReceiver_fifof$D_OUT[31:28])
      4'd1, 4'd4, 4'd5, 4'd7, 4'd8, 4'd12, 4'd13:
	  MUX_ascon_inRecvType$write_1__VAL_2 =
	      lwc_sdiReceiver_fifof$D_OUT[31:28];
      default: MUX_ascon_inRecvType$write_1__VAL_2 = 4'd9;
    endcase
  end
  assign MUX_ascon_inState$write_1__VAL_2 =
	     (ascon_sipo_count_reg[1] && ascon_sipo_count_reg[0]) ?
	       2'd3 :
	       2'd2 ;
  always@(ascon_inRecvType or
	  IF_ascon_inEmptyType_2_THEN_0_ELSE_IF_ascon_in_ETC___d27)
  begin
    case (ascon_inRecvType)
      4'd1, 4'd4, 4'd5:
	  MUX_ascon_inState$write_1__VAL_3 =
	      IF_ascon_inEmptyType_2_THEN_0_ELSE_IF_ascon_in_ETC___d27;
      4'd12, 4'd13: MUX_ascon_inState$write_1__VAL_3 = 2'd0;
      default: MUX_ascon_inState$write_1__VAL_3 = 2'd0;
    endcase
  end
  assign MUX_ascon_inState$write_1__VAL_4 =
	     (lwc_sdiReceiver_fifof$D_OUT[15:0] == 16'd0) ? 2'd2 : 2'd1 ;
  assign MUX_ascon_inState$write_1__VAL_5 =
	     (lwc_pdiReceiver_fifof$D_OUT[15:0] == 16'd0) ? 2'd2 : 2'd1 ;
  assign MUX_ascon_piso_countReg$write_1__VAL_1 = ascon_piso_countReg - 3'd1 ;
  always@(ascon_inRecvType or
	  IF_ascon_inEmptyType_2_THEN_0_ELSE_IF_ascon_in_ETC___d106)
  begin
    case (ascon_inRecvType)
      4'd1, 4'd12, 4'd13: MUX_ascon_piso_countReg$write_1__VAL_2 = 3'd0;
      4'd4, 4'd5:
	  MUX_ascon_piso_countReg$write_1__VAL_2 =
	      IF_ascon_inEmptyType_2_THEN_0_ELSE_IF_ascon_in_ETC___d106;
      default: MUX_ascon_piso_countReg$write_1__VAL_2 = 3'd0;
    endcase
  end
  assign MUX_ascon_piso_vec$write_1__VAL_1 =
	     { ascon_piso_vec[95:0], ascon_piso_vec[127:96] } ;
  always@(ascon_inRecvType or
	  ascon_asconState or
	  IF_ascon_inEmptyType_2_THEN_ascon_asconState_2_ETC___d94 or
	  newState_x0__h2967 or newState_x1__h2968 or ascon_keyR)
  begin
    case (ascon_inRecvType)
      4'd1:
	  MUX_ascon_piso_vec$write_1__VAL_2 =
	      IF_ascon_inEmptyType_2_THEN_ascon_asconState_2_ETC___d94;
      4'd4, 4'd5:
	  MUX_ascon_piso_vec$write_1__VAL_2 =
	      { newState_x0__h2967, newState_x1__h2968 };
      4'd12: MUX_ascon_piso_vec$write_1__VAL_2 = ascon_asconState[319:192];
      4'd13:
	  MUX_ascon_piso_vec$write_1__VAL_2 =
	      { 64'h80800C0800000000, ascon_keyR[127:64] };
      default: MUX_ascon_piso_vec$write_1__VAL_2 = ascon_asconState[319:192];
    endcase
  end
  assign MUX_ascon_roundCounter$write_1__VAL_1 = ascon_roundCounter - 4'd2 ;
  always@(ascon_inRecvType or
	  IF_ascon_inEmptyType_2_THEN_12_ELSE_IF_ascon_i_ETC___d38)
  begin
    case (ascon_inRecvType)
      4'd1: MUX_ascon_roundCounter$write_1__VAL_2 = 4'd8;
      4'd13: MUX_ascon_roundCounter$write_1__VAL_2 = 4'd12;
      default: MUX_ascon_roundCounter$write_1__VAL_2 =
		   IF_ascon_inEmptyType_2_THEN_12_ELSE_IF_ascon_i_ETC___d38;
    endcase
  end
  assign MUX_ascon_sipo_count_reg$write_1__VAL_1 =
	     ascon_sipo_count_reg + 3'd1 ;
  assign MUX_ascon_sipo_vec$write_1__VAL_1 =
	     (ascon_sipo_count_reg == 3'd0 ||
	      !ascon_inLastBlockPadded && ascon_inLastOfType) ?
	       { ascon_sipo_vec[95:0], 32'h80000000 } :
	       { ascon_sipo_vec[95:0], 32'd0 } ;
  assign MUX_ascon_sipo_vec$write_1__VAL_2 =
	     { ascon_sipo_vec[95:0],
	       lwc_inWordCounter_82_BITS_13_TO_1_85_EQ_0_86_A_ETC___d495 ?
		 IF_lwc_finalRemainBytes_84_EQ_0_92_THEN_lwc_sd_ETC___d506 :
		 lwc_sdiReceiver_fifof$D_OUT } ;
  assign MUX_ascon_sipo_vec$write_1__VAL_3 =
	     { ascon_sipo_vec[95:0],
	       lwc_inWordCounter_82_BITS_13_TO_1_85_EQ_0_86_A_ETC___d495 ?
		 IF_lwc_finalRemainBytes_84_EQ_0_92_THEN_lwc_pd_ETC___d534 :
		 lwc_pdiReceiver_fifof$D_OUT } ;
  assign MUX_ascon_xState$write_1__VAL_2 =
	     (ascon_finalADStep || ascon_initStep ||
	      ascon_roundCounter == 4'd2 && !ascon_emitTag) ?
	       2'd0 :
	       (ascon_emitTag ? 2'd2 : 2'd0) ;
  assign MUX_lwc_doSender_fifof_cntr_r$write_1__VAL_2 =
	     lwc_doSender_fifof_cntr_r + 2'd1 ;
  always@(WILL_FIRE_RL_lwc_rl_out_header or
	  MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_lwc_rl_sendout_data or
	  MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_lwc_rl_out_status or
	  MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_lwc_rl_out_header:
	  MUX_lwc_doSender_fifof_q_0$write_1__VAL_1 =
	      MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_lwc_rl_sendout_data:
	  MUX_lwc_doSender_fifof_q_0$write_1__VAL_1 =
	      MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_lwc_rl_out_status:
	  MUX_lwc_doSender_fifof_q_0$write_1__VAL_1 =
	      MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_3;
      default: MUX_lwc_doSender_fifof_q_0$write_1__VAL_1 =
		   33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign MUX_lwc_doSender_fifof_q_0$write_1__VAL_2 =
	     (lwc_doSender_fifof_cntr_r == 2'd1) ?
	       MUX_lwc_doSender_fifof_q_0$write_1__VAL_1 :
	       lwc_doSender_fifof_q_1 ;
  assign MUX_lwc_doSender_fifof_q_1$write_1__VAL_2 =
	     (lwc_doSender_fifof_cntr_r == 2'd2) ?
	       MUX_lwc_doSender_fifof_q_0$write_1__VAL_1 :
	       { 1'd0,
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_lwc_doSender_fifof_q_1$write_1__VAL_3 =
	     { 1'd0,
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_1 =
	     { 1'd0, lwc_headersFifo_rv[31:0] } ;
  assign MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_2 = { 1'd0, x__h18779 } ;
  assign MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_3 =
	     { 4'd15, lwc_statFailure, 28'b0 } ;
  always@(lwc_pdiReceiver_fifof$D_OUT)
  begin
    case (lwc_pdiReceiver_fifof$D_OUT[31:28])
      4'd4:
	  MUX_lwc_headersFifo_rv$port1__write_1__VAL_1 =
	      { 7'd84,
		lwc_pdiReceiver_fifof$D_OUT[25],
		9'd0,
		lwc_pdiReceiver_fifof$D_OUT[15:0] };
      4'd5:
	  MUX_lwc_headersFifo_rv$port1__write_1__VAL_1 =
	      { 7'd80,
		lwc_pdiReceiver_fifof$D_OUT[25],
		9'd256,
		lwc_pdiReceiver_fifof$D_OUT[15:0] };
      default: MUX_lwc_headersFifo_rv$port1__write_1__VAL_1 = 33'h193000020;
    endcase
  end
  assign MUX_lwc_inState$write_1__VAL_2 =
	     (lwc_pdiReceiver_fifof$D_OUT[15:0] == 16'd0) ?
	       ((lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd5 &&
		 lwc_pdiReceiver_fifof$D_OUT[25]) ?
		  4'd5 :
		  ((lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd4) ?
		     4'd7 :
		     4'd0)) :
	       4'd4 ;
  assign MUX_lwc_inState$write_1__VAL_3 =
	     (lwc_inSegType == 4'd4 && lwc_inSegEoT) ?
	       4'd7 :
	       IF_lwc_inSegType_37_EQ_5_40_AND_lwc_inSegEoT_8_ETC___d544 ;
  assign MUX_lwc_inState$write_1__VAL_5 =
	     lwc_pdiReceiver_fifof$D_OUT[30] ? 4'd1 : 4'd2 ;
  assign MUX_lwc_inWordCounter$write_1__VAL_1 = lwc_inWordCounter - 14'd1 ;
  assign MUX_lwc_outCounter$write_1__VAL_1 =
	     (lwc_headersFifo_rv[15:0] == 16'd0) ?
	       14'd4 :
	       lwc_headersFifo_rv[15:2] ;
  assign MUX_lwc_outCounter$write_1__VAL_2 =
	     (lwc_outCounter[13:1] == 13'd0 && !lwc_outCounter[0] ||
	      lwc_outRemainder == 2'd0 && lwc_outCounter[13:1] == 13'd0) ?
	       14'd4 :
	       x__h18996 ;
  assign MUX_lwc_outState$write_1__VAL_2 =
	     lwc_outSegLast ?
	       ((lwc_outSegType == 4'd4) ? 2'd2 : 2'd3) :
	       2'd0 ;
  assign MUX_lwc_outState$write_1__VAL_3 =
	     (lwc_headersFifo_rv[15:0] == 16'd0) ?
	       ((lwc_headersFifo_rv[31:28] == 4'd4) ? 2'd2 : 2'd3) :
	       2'd1 ;

  // inlined wires
  assign lwc_doSender_fifof_x_wire$whas =
	     WILL_FIRE_RL_lwc_rl_out_header ||
	     WILL_FIRE_RL_lwc_rl_sendout_data ||
	     WILL_FIRE_RL_lwc_rl_out_status ;
  assign lwc_pdiReceiver_deq_pw$whas =
	     WILL_FIRE_RL_lwc_rl_get_tag_data ||
	     WILL_FIRE_RL_lwc_rl_get_tag_hdr ||
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi ||
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_pdi_instruction ;
  assign lwc_sdiReceiver_deq_pw$whas =
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_inst ;
  assign lwc_doSender_fifof_enqueueing$whas =
	     WILL_FIRE_RL_lwc_rl_out_status ||
	     WILL_FIRE_RL_lwc_rl_sendout_data ||
	     WILL_FIRE_RL_lwc_rl_out_header ;
  assign lwc_doSender_fifof_dequeueing$whas =
	     lwc_doSender_fifof_cntr_r != 2'd0 && do_ready ;
  assign lwc_headersFifo_rv$port1__read =
	     WILL_FIRE_RL_lwc_rl_out_header ?
	       MUX_lwc_doSender_fifof_q_1$write_1__VAL_3 :
	       lwc_headersFifo_rv ;
  assign lwc_headersFifo_rv$EN_port1__write =
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr &&
	     (lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd5 ||
	      lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd4 ||
	      lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd7 &&
	      lwc_pdiReceiver_fifof$D_OUT[24]) ||
	     WILL_FIRE_RL_lwc_rl_enq_tag ;
  assign lwc_headersFifo_rv$port1__write_1 =
	     MUX_lwc_headersFifo_rv$port1__write_1__SEL_1 ?
	       MUX_lwc_headersFifo_rv$port1__write_1__VAL_1 :
	       33'h183000010 ;
  assign lwc_headersFifo_rv$port2__read =
	     lwc_headersFifo_rv$EN_port1__write ?
	       lwc_headersFifo_rv$port1__write_1 :
	       lwc_headersFifo_rv$port1__read ;
  assign lwc_tagFifo_rv$port1__read =
	     WILL_FIRE_RL_lwc_rl_verify_tag ?
	       MUX_lwc_doSender_fifof_q_1$write_1__VAL_3 :
	       lwc_tagFifo_rv ;
  assign lwc_tagFifo_rv$port1__write_1 =
	     { 1'd1, lwc_pdiReceiver_fifof$D_OUT } ;
  assign lwc_tagFifo_rv$port2__read =
	     WILL_FIRE_RL_lwc_rl_get_tag_data ?
	       lwc_tagFifo_rv$port1__write_1 :
	       lwc_tagFifo_rv$port1__read ;

  // register ascon_asconState
  assign ascon_asconState$D_IN =
	     MUX_ascon_asconState$write_1__SEL_1 ?
	       MUX_ascon_asconState$write_1__VAL_1 :
	       MUX_ascon_asconState$write_1__VAL_2 ;
  assign ascon_asconState$EN =
	     ascon_xState == 2'd1 &&
	     NOT_ascon_roundCounter_52_EQ_0_53_70_OR_ascon__ETC___d173 ||
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze ;

  // register ascon_bdiValidBytes
  assign ascon_bdiValidBytes$D_IN = MUX_ascon_sipo_count_reg$write_1__VAL_1 ;
  assign ascon_bdiValidBytes$EN = MUX_ascon_inState$write_1__PSEL_2 ;

  // register ascon_emitTag
  assign ascon_emitTag$D_IN =
	     MUX_ascon_emitTag$write_1__SEL_1 &&
	     MUX_ascon_emitTag$write_1__VAL_1 ;
  assign ascon_emitTag$EN =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     (ascon_inRecvType == 4'd5 || ascon_inRecvType == 4'd4) ||
	     ascon_xState == 2'd1 &&
	     ascon_roundCounter_52_EQ_0_53_AND_ascon_emitTa_ETC___d334 ;

  // register ascon_finalADStep
  assign ascon_finalADStep$D_IN =
	     MUX_ascon_finalADStep$write_1__SEL_1 && !ascon_inEmptyType ;
  assign ascon_finalADStep$EN =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     ascon_inRecvType_3_EQ_1_9_AND_ascon_inEmptyTyp_ETC___d50 ||
	     ascon_xState == 2'd1 && ascon_roundCounter == 4'd0 &&
	     !ascon_initStep &&
	     ascon_finalADStep ;

  // register ascon_inEmptyType
  assign ascon_inEmptyType$D_IN =
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ?
	       lwc_sdiReceiver_fifof$D_OUT[15:0] == 16'd0 :
	       lwc_pdiReceiver_fifof$D_OUT[15:0] == 16'd0 ;
  assign ascon_inEmptyType$EN =
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ;

  // register ascon_inLastBlockPadded
  assign ascon_inLastBlockPadded$D_IN =
	     MUX_ascon_inLastBlockPadded$write_1__SEL_1 ||
	     MUX_ascon_inLastBlockPadded$write_1__VAL_2 ;
  assign ascon_inLastBlockPadded$EN =
	     MUX_ascon_inLastBlockPadded$write_1__SEL_1 ||
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi ||
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi ;

  // register ascon_inLastOfType
  assign ascon_inLastOfType$D_IN =
	     lwc_inWordCounter[13:1] == 13'd0 &&
	     (!lwc_inWordCounter[0] || lwc_finalRemainBytes == 2'd0) &&
	     lwc_inSegEoT ;
  assign ascon_inLastOfType$EN = MUX_ascon_inState$write_1__PSEL_2 ;

  // register ascon_inPadarg
  assign ascon_inPadarg$D_IN = lwc_finalRemainBytes ;
  assign ascon_inPadarg$EN = MUX_ascon_inState$write_1__PSEL_2 ;

  // register ascon_inPaddedBlockZero
  assign ascon_inPaddedBlockZero$D_IN =
	     MUX_ascon_inLastBlockPadded$write_1__SEL_1 &&
	     MUX_ascon_inPaddedBlockZero$write_1__VAL_1 ;
  assign ascon_inPaddedBlockZero$EN =
	     MUX_ascon_inLastBlockPadded$write_1__SEL_1 ||
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     (ascon_inRecvType_3_EQ_5_7_AND_NOT_ascon_inEmpt_ETC___d43 ||
	      ascon_inRecvType_3_EQ_4_8_AND_NOT_ascon_inEmpt_ETC___d44 ||
	      ascon_inRecvType_3_EQ_1_9_AND_NOT_ascon_inEmpt_ETC___d45) ;

  // register ascon_inRecvType
  assign ascon_inRecvType$D_IN =
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ?
	       MUX_ascon_inRecvType$write_1__VAL_1 :
	       MUX_ascon_inRecvType$write_1__VAL_2 ;
  assign ascon_inRecvType$EN =
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ;

  // register ascon_inState
  always@(MUX_ascon_inState$write_1__SEL_1 or
	  MUX_ascon_inState$write_1__SEL_2 or
	  MUX_ascon_inState$write_1__VAL_2 or
	  WILL_FIRE_RL_ascon_rl_absorb_squeeze or
	  MUX_ascon_inState$write_1__VAL_3 or
	  WILL_FIRE_RL_lwc_rl_get_sdi_hdr or
	  MUX_ascon_inState$write_1__VAL_4 or
	  WILL_FIRE_RL_lwc_rl_get_pdi_hdr or MUX_ascon_inState$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ascon_inState$write_1__SEL_1: ascon_inState$D_IN = 2'd3;
      MUX_ascon_inState$write_1__SEL_2:
	  ascon_inState$D_IN = MUX_ascon_inState$write_1__VAL_2;
      WILL_FIRE_RL_ascon_rl_absorb_squeeze:
	  ascon_inState$D_IN = MUX_ascon_inState$write_1__VAL_3;
      WILL_FIRE_RL_lwc_rl_get_sdi_hdr:
	  ascon_inState$D_IN = MUX_ascon_inState$write_1__VAL_4;
      WILL_FIRE_RL_lwc_rl_get_pdi_hdr:
	  ascon_inState$D_IN = MUX_ascon_inState$write_1__VAL_5;
      default: ascon_inState$D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign ascon_inState$EN =
	     WILL_FIRE_RL_ascon_rl_fill_zero && ascon_sipo_count_reg[1] &&
	     ascon_sipo_count_reg[0] ||
	     _dand2ascon_inState$EN_write ||
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ;

  // register ascon_initStep
  assign ascon_initStep$D_IN = MUX_ascon_initStep$write_1__SEL_1 ;
  assign ascon_initStep$EN =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     ascon_inRecvType == 4'd13 ||
	     ascon_xState == 2'd1 && ascon_roundCounter == 4'd0 &&
	     ascon_initStep ;

  // register ascon_keyR
  assign ascon_keyR$D_IN = ascon_sipo_vec ;
  assign ascon_keyR$EN =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     ascon_inRecvType == 4'd12 ;

  // register ascon_outPadarg
  assign ascon_outPadarg$D_IN =
	     MUX_ascon_outPadarg$write_1__SEL_1 ? ascon_inPadarg : 2'd0 ;
  assign ascon_outPadarg$EN =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     (ascon_inRecvType_3_EQ_5_7_AND_NOT_ascon_inEmpt_ETC___d43 ||
	      ascon_inRecvType_3_EQ_4_8_AND_NOT_ascon_inEmpt_ETC___d44) ||
	     WILL_FIRE_RL_ascon_rl_output_tag ;

  // register ascon_piso_countReg
  always@(MUX_ascon_piso_countReg$write_1__SEL_1 or
	  MUX_ascon_piso_countReg$write_1__VAL_1 or
	  WILL_FIRE_RL_ascon_rl_absorb_squeeze or
	  MUX_ascon_piso_countReg$write_1__VAL_2 or
	  WILL_FIRE_RL_ascon_rl_output_tag)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ascon_piso_countReg$write_1__SEL_1:
	  ascon_piso_countReg$D_IN = MUX_ascon_piso_countReg$write_1__VAL_1;
      WILL_FIRE_RL_ascon_rl_absorb_squeeze:
	  ascon_piso_countReg$D_IN = MUX_ascon_piso_countReg$write_1__VAL_2;
      WILL_FIRE_RL_ascon_rl_output_tag: ascon_piso_countReg$D_IN = 3'd4;
      default: ascon_piso_countReg$D_IN = 3'bxxx /* unspecified value */ ;
    endcase
  end
  assign ascon_piso_countReg$EN =
	     WILL_FIRE_RL_lwc_rl_sendout_data ||
	     WILL_FIRE_RL_lwc_rl_verify_tag ||
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze ||
	     WILL_FIRE_RL_ascon_rl_output_tag ;

  // register ascon_piso_vec
  always@(MUX_ascon_piso_countReg$write_1__SEL_1 or
	  MUX_ascon_piso_vec$write_1__VAL_1 or
	  WILL_FIRE_RL_ascon_rl_absorb_squeeze or
	  MUX_ascon_piso_vec$write_1__VAL_2 or
	  WILL_FIRE_RL_ascon_rl_output_tag or ascon_asconState)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ascon_piso_countReg$write_1__SEL_1:
	  ascon_piso_vec$D_IN = MUX_ascon_piso_vec$write_1__VAL_1;
      WILL_FIRE_RL_ascon_rl_absorb_squeeze:
	  ascon_piso_vec$D_IN = MUX_ascon_piso_vec$write_1__VAL_2;
      WILL_FIRE_RL_ascon_rl_output_tag:
	  ascon_piso_vec$D_IN = ascon_asconState[127:0];
      default: ascon_piso_vec$D_IN =
		   128'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign ascon_piso_vec$EN =
	     WILL_FIRE_RL_lwc_rl_sendout_data ||
	     WILL_FIRE_RL_lwc_rl_verify_tag ||
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze ||
	     WILL_FIRE_RL_ascon_rl_output_tag ;

  // register ascon_roundCounter
  assign ascon_roundCounter$D_IN =
	     MUX_ascon_roundCounter$write_1__SEL_1 ?
	       MUX_ascon_roundCounter$write_1__VAL_1 :
	       MUX_ascon_roundCounter$write_1__VAL_2 ;
  assign ascon_roundCounter$EN =
	     ascon_xState == 2'd1 && ascon_roundCounter != 4'd0 ||
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     (ascon_inRecvType == 4'd13 || ascon_inRecvType == 4'd5 ||
	      ascon_inRecvType == 4'd4 ||
	      ascon_inRecvType == 4'd1 && !ascon_inEmptyType) ;

  // register ascon_sipo_count_reg
  assign ascon_sipo_count_reg$D_IN =
	     MUX_ascon_sipo_count_reg$write_1__SEL_1 ?
	       MUX_ascon_sipo_count_reg$write_1__VAL_1 :
	       3'd0 ;
  assign ascon_sipo_count_reg$EN =
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi ||
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi ||
	     WILL_FIRE_RL_ascon_rl_fill_zero ||
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze ;

  // register ascon_sipo_vec
  always@(WILL_FIRE_RL_ascon_rl_fill_zero or
	  MUX_ascon_sipo_vec$write_1__VAL_1 or
	  WILL_FIRE_RL_lwc_rl_feed_core_sdi or
	  MUX_ascon_sipo_vec$write_1__VAL_2 or
	  WILL_FIRE_RL_lwc_rl_feed_core_pdi or
	  MUX_ascon_sipo_vec$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ascon_rl_fill_zero:
	  ascon_sipo_vec$D_IN = MUX_ascon_sipo_vec$write_1__VAL_1;
      WILL_FIRE_RL_lwc_rl_feed_core_sdi:
	  ascon_sipo_vec$D_IN = MUX_ascon_sipo_vec$write_1__VAL_2;
      WILL_FIRE_RL_lwc_rl_feed_core_pdi:
	  ascon_sipo_vec$D_IN = MUX_ascon_sipo_vec$write_1__VAL_3;
      default: ascon_sipo_vec$D_IN =
		   128'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign ascon_sipo_vec$EN =
	     WILL_FIRE_RL_ascon_rl_fill_zero ||
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi ||
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi ;

  // register ascon_xState
  always@(MUX_ascon_roundCounter$write_1__SEL_2 or
	  MUX_ascon_xState$write_1__SEL_2 or
	  MUX_ascon_xState$write_1__VAL_2 or WILL_FIRE_RL_ascon_rl_output_tag)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ascon_roundCounter$write_1__SEL_2: ascon_xState$D_IN = 2'd1;
      MUX_ascon_xState$write_1__SEL_2:
	  ascon_xState$D_IN = MUX_ascon_xState$write_1__VAL_2;
      WILL_FIRE_RL_ascon_rl_output_tag: ascon_xState$D_IN = 2'd0;
      default: ascon_xState$D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign ascon_xState$EN =
	     WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	     (ascon_inRecvType == 4'd13 || ascon_inRecvType == 4'd5 ||
	      ascon_inRecvType == 4'd4 ||
	      ascon_inRecvType == 4'd1 && !ascon_inEmptyType) ||
	     ascon_xState == 2'd1 &&
	     (ascon_roundCounter == 4'd0 ||
	      ascon_roundCounter_52_EQ_2_54_AND_NOT_ascon_em_ETC___d163) ||
	     WILL_FIRE_RL_ascon_rl_output_tag ;

  // register lwc_doSender_fifof_cntr_r
  assign lwc_doSender_fifof_cntr_r$D_IN =
	     WILL_FIRE_RL_lwc_doSender_fifof_decCtr ?
	       lwc_doSender_fifof_cntr_r_71_MINUS_1___d380 :
	       MUX_lwc_doSender_fifof_cntr_r$write_1__VAL_2 ;
  assign lwc_doSender_fifof_cntr_r$EN =
	     WILL_FIRE_RL_lwc_doSender_fifof_decCtr ||
	     WILL_FIRE_RL_lwc_doSender_fifof_incCtr ;

  // register lwc_doSender_fifof_q_0
  always@(MUX_lwc_doSender_fifof_q_0$write_1__SEL_1 or
	  MUX_lwc_doSender_fifof_q_0$write_1__VAL_1 or
	  MUX_lwc_doSender_fifof_q_0$write_1__SEL_2 or
	  MUX_lwc_doSender_fifof_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_lwc_doSender_fifof_decCtr or lwc_doSender_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lwc_doSender_fifof_q_0$write_1__SEL_1:
	  lwc_doSender_fifof_q_0$D_IN =
	      MUX_lwc_doSender_fifof_q_0$write_1__VAL_1;
      MUX_lwc_doSender_fifof_q_0$write_1__SEL_2:
	  lwc_doSender_fifof_q_0$D_IN =
	      MUX_lwc_doSender_fifof_q_0$write_1__VAL_2;
      WILL_FIRE_RL_lwc_doSender_fifof_decCtr:
	  lwc_doSender_fifof_q_0$D_IN = lwc_doSender_fifof_q_1;
      default: lwc_doSender_fifof_q_0$D_IN =
		   33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign lwc_doSender_fifof_q_0$EN =
	     WILL_FIRE_RL_lwc_doSender_fifof_incCtr &&
	     lwc_doSender_fifof_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_lwc_doSender_fifof_both && _dfoo3 ||
	     WILL_FIRE_RL_lwc_doSender_fifof_decCtr ;

  // register lwc_doSender_fifof_q_1
  always@(MUX_lwc_doSender_fifof_q_1$write_1__SEL_1 or
	  MUX_lwc_doSender_fifof_q_0$write_1__VAL_1 or
	  MUX_lwc_doSender_fifof_q_1$write_1__SEL_2 or
	  MUX_lwc_doSender_fifof_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_lwc_doSender_fifof_decCtr or
	  MUX_lwc_doSender_fifof_q_1$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lwc_doSender_fifof_q_1$write_1__SEL_1:
	  lwc_doSender_fifof_q_1$D_IN =
	      MUX_lwc_doSender_fifof_q_0$write_1__VAL_1;
      MUX_lwc_doSender_fifof_q_1$write_1__SEL_2:
	  lwc_doSender_fifof_q_1$D_IN =
	      MUX_lwc_doSender_fifof_q_1$write_1__VAL_2;
      WILL_FIRE_RL_lwc_doSender_fifof_decCtr:
	  lwc_doSender_fifof_q_1$D_IN =
	      MUX_lwc_doSender_fifof_q_1$write_1__VAL_3;
      default: lwc_doSender_fifof_q_1$D_IN =
		   33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign lwc_doSender_fifof_q_1$EN =
	     WILL_FIRE_RL_lwc_doSender_fifof_incCtr &&
	     lwc_doSender_fifof_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_lwc_doSender_fifof_both && _dfoo1 ||
	     WILL_FIRE_RL_lwc_doSender_fifof_decCtr ;

  // register lwc_finalRemainBytes
  assign lwc_finalRemainBytes$D_IN =
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ?
	       lwc_sdiReceiver_fifof$D_OUT[1:0] :
	       lwc_pdiReceiver_fifof$D_OUT[1:0] ;
  assign lwc_finalRemainBytes$EN =
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ;

  // register lwc_headersFifo_rv
  assign lwc_headersFifo_rv$D_IN = lwc_headersFifo_rv$port2__read ;
  assign lwc_headersFifo_rv$EN = 1'b1 ;

  // register lwc_inSegEoT
  assign lwc_inSegEoT$D_IN =
	     !WILL_FIRE_RL_lwc_rl_get_pdi_hdr ||
	     lwc_pdiReceiver_fifof$D_OUT[25] ;
  assign lwc_inSegEoT$EN =
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ;

  // register lwc_inSegLast
  assign lwc_inSegLast$D_IN =
	     !WILL_FIRE_RL_lwc_rl_get_pdi_hdr ||
	     lwc_pdiReceiver_fifof$D_OUT[24] ;
  assign lwc_inSegLast$EN =
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ;

  // register lwc_inSegType
  assign lwc_inSegType$D_IN = MUX_ascon_inRecvType$write_1__VAL_1 ;
  assign lwc_inSegType$EN = WILL_FIRE_RL_lwc_rl_get_pdi_hdr ;

  // register lwc_inState
  always@(MUX_lwc_inState$write_1__SEL_2 or
	  MUX_lwc_inState$write_1__VAL_2 or
	  MUX_lwc_inState$write_1__SEL_3 or
	  MUX_lwc_inState$write_1__VAL_3 or
	  WILL_FIRE_RL_lwc_rl_pdi_instruction or
	  MUX_lwc_inState$write_1__VAL_5 or
	  MUX_lwc_inState$write_1__SEL_1 or
	  MUX_lwc_inState$write_1__SEL_4 or
	  WILL_FIRE_RL_lwc_rl_enq_tag or
	  WILL_FIRE_RL_lwc_rl_get_sdi_inst or
	  WILL_FIRE_RL_lwc_rl_get_tag_hdr or WILL_FIRE_RL_lwc_rl_get_sdi_hdr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lwc_inState$write_1__SEL_2:
	  lwc_inState$D_IN = MUX_lwc_inState$write_1__VAL_2;
      MUX_lwc_inState$write_1__SEL_3:
	  lwc_inState$D_IN = MUX_lwc_inState$write_1__VAL_3;
      WILL_FIRE_RL_lwc_rl_pdi_instruction:
	  lwc_inState$D_IN = MUX_lwc_inState$write_1__VAL_5;
      MUX_lwc_inState$write_1__SEL_1 || MUX_lwc_inState$write_1__SEL_4 ||
      WILL_FIRE_RL_lwc_rl_enq_tag:
	  lwc_inState$D_IN = 4'd0;
      WILL_FIRE_RL_lwc_rl_get_sdi_inst: lwc_inState$D_IN = 4'd3;
      WILL_FIRE_RL_lwc_rl_get_tag_hdr: lwc_inState$D_IN = 4'd6;
      WILL_FIRE_RL_lwc_rl_get_sdi_hdr: lwc_inState$D_IN = 4'd8;
      default: lwc_inState$D_IN = 4'bxxxx /* unspecified value */ ;
    endcase
  end
  assign lwc_inState$EN =
	     WILL_FIRE_RL_lwc_rl_get_tag_data &&
	     lwc_inWordCounter[13:1] == 13'd0 ||
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr &&
	     (lwc_pdiReceiver_fifof$D_OUT[15:0] != 16'd0 ||
	      lwc_pdiReceiver_fifof$D_OUT[24] ||
	      lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd5 &&
	      lwc_pdiReceiver_fifof$D_OUT[25]) ||
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi &&
	     (lwc_inWordCounter[13:1] == 13'd0 && !lwc_inWordCounter[0] ||
	      lwc_finalRemainBytes == 2'd0 &&
	      lwc_inWordCounter[13:1] == 13'd0) ||
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi &&
	     (lwc_inWordCounter[13:1] == 13'd0 && !lwc_inWordCounter[0] ||
	      lwc_finalRemainBytes == 2'd0 &&
	      lwc_inWordCounter[13:1] == 13'd0) ||
	     WILL_FIRE_RL_lwc_rl_pdi_instruction ||
	     WILL_FIRE_RL_lwc_rl_enq_tag ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_inst ||
	     WILL_FIRE_RL_lwc_rl_get_tag_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ;

  // register lwc_inWordCounter
  always@(MUX_lwc_inWordCounter$write_1__SEL_1 or
	  MUX_lwc_inWordCounter$write_1__VAL_1 or
	  WILL_FIRE_RL_lwc_rl_get_sdi_hdr or
	  lwc_sdiReceiver_fifof$D_OUT or
	  MUX_lwc_inWordCounter$write_1__SEL_3 or lwc_pdiReceiver_fifof$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lwc_inWordCounter$write_1__SEL_1:
	  lwc_inWordCounter$D_IN = MUX_lwc_inWordCounter$write_1__VAL_1;
      WILL_FIRE_RL_lwc_rl_get_sdi_hdr:
	  lwc_inWordCounter$D_IN = lwc_sdiReceiver_fifof$D_OUT[15:2];
      MUX_lwc_inWordCounter$write_1__SEL_3:
	  lwc_inWordCounter$D_IN = lwc_pdiReceiver_fifof$D_OUT[15:2];
      default: lwc_inWordCounter$D_IN =
		   14'bxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign lwc_inWordCounter$EN =
	     WILL_FIRE_RL_lwc_rl_get_tag_data ||
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi ||
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_tag_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ;

  // register lwc_outCounter
  always@(MUX_lwc_outCounter$write_1__SEL_1 or
	  MUX_lwc_outCounter$write_1__VAL_1 or
	  MUX_lwc_outCounter$write_1__SEL_2 or
	  MUX_lwc_outCounter$write_1__VAL_2 or
	  WILL_FIRE_RL_lwc_rl_verify_tag or x__h18996)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lwc_outCounter$write_1__SEL_1:
	  lwc_outCounter$D_IN = MUX_lwc_outCounter$write_1__VAL_1;
      MUX_lwc_outCounter$write_1__SEL_2:
	  lwc_outCounter$D_IN = MUX_lwc_outCounter$write_1__VAL_2;
      WILL_FIRE_RL_lwc_rl_verify_tag: lwc_outCounter$D_IN = x__h18996;
      default: lwc_outCounter$D_IN =
		   14'bxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign lwc_outCounter$EN =
	     WILL_FIRE_RL_lwc_rl_out_header &&
	     (lwc_headersFifo_rv[15:0] != 16'd0 ||
	      lwc_headersFifo_rv[31:28] == 4'd4) ||
	     WILL_FIRE_RL_lwc_rl_sendout_data &&
	     NOT_lwc_outCounter_03_BITS_13_TO_1_08_EQ_0_09__ETC___d641 ||
	     WILL_FIRE_RL_lwc_rl_verify_tag ;

  // register lwc_outRemainder
  assign lwc_outRemainder$D_IN = lwc_headersFifo_rv[1:0] ;
  assign lwc_outRemainder$EN = WILL_FIRE_RL_lwc_rl_out_header ;

  // register lwc_outSegLast
  assign lwc_outSegLast$D_IN = lwc_headersFifo_rv[24] ;
  assign lwc_outSegLast$EN = WILL_FIRE_RL_lwc_rl_out_header ;

  // register lwc_outSegType
  always@(lwc_headersFifo_rv)
  begin
    case (lwc_headersFifo_rv[31:28])
      4'd1, 4'd4, 4'd5, 4'd7, 4'd8, 4'd12, 4'd13:
	  lwc_outSegType$D_IN = lwc_headersFifo_rv[31:28];
      default: lwc_outSegType$D_IN = 4'd9;
    endcase
  end
  assign lwc_outSegType$EN = WILL_FIRE_RL_lwc_rl_out_header ;

  // register lwc_outState
  always@(MUX_lwc_outState$write_1__SEL_1 or
	  MUX_lwc_outState$write_1__SEL_2 or
	  MUX_lwc_outState$write_1__VAL_2 or
	  MUX_lwc_outState$write_1__SEL_3 or
	  MUX_lwc_outState$write_1__VAL_3 or WILL_FIRE_RL_lwc_rl_out_status)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lwc_outState$write_1__SEL_1: lwc_outState$D_IN = 2'd3;
      MUX_lwc_outState$write_1__SEL_2:
	  lwc_outState$D_IN = MUX_lwc_outState$write_1__VAL_2;
      MUX_lwc_outState$write_1__SEL_3:
	  lwc_outState$D_IN = MUX_lwc_outState$write_1__VAL_3;
      WILL_FIRE_RL_lwc_rl_out_status: lwc_outState$D_IN = 2'd0;
      default: lwc_outState$D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign lwc_outState$EN =
	     WILL_FIRE_RL_lwc_rl_verify_tag &&
	     lwc_outCounter[13:1] == 13'd0 ||
	     WILL_FIRE_RL_lwc_rl_sendout_data &&
	     (lwc_outCounter[13:1] == 13'd0 && !lwc_outCounter[0] ||
	      lwc_outRemainder == 2'd0 && lwc_outCounter[13:1] == 13'd0) ||
	     WILL_FIRE_RL_lwc_rl_out_header &&
	     (lwc_headersFifo_rv[15:0] != 16'd0 || lwc_headersFifo_rv[24] ||
	      lwc_headersFifo_rv[31:28] == 4'd4) ||
	     WILL_FIRE_RL_lwc_rl_out_status ;

  // register lwc_statFailure
  assign lwc_statFailure$D_IN = MUX_lwc_statFailure$write_1__SEL_1 ;
  assign lwc_statFailure$EN =
	     WILL_FIRE_RL_lwc_rl_verify_tag &&
	     NOT_lwc_tagFifo_rv_port0__read__94_BITS_31_TO__ETC___d607 ||
	     WILL_FIRE_RL_lwc_rl_out_status ;

  // register lwc_tagFifo_rv
  assign lwc_tagFifo_rv$D_IN = lwc_tagFifo_rv$port2__read ;
  assign lwc_tagFifo_rv$EN = 1'b1 ;

  // submodule lwc_pdiReceiver_fifof
  assign lwc_pdiReceiver_fifof$D_IN = pdi_data ;
  assign lwc_pdiReceiver_fifof$ENQ =
	     lwc_pdiReceiver_fifof$FULL_N && pdi_valid ;
  assign lwc_pdiReceiver_fifof$DEQ = lwc_pdiReceiver_deq_pw$whas ;
  assign lwc_pdiReceiver_fifof$CLR = 1'b0 ;

  // submodule lwc_sdiReceiver_fifof
  assign lwc_sdiReceiver_fifof$D_IN = sdi_data ;
  assign lwc_sdiReceiver_fifof$ENQ =
	     lwc_sdiReceiver_fifof$FULL_N && sdi_valid ;
  assign lwc_sdiReceiver_fifof$DEQ = lwc_sdiReceiver_deq_pw$whas ;
  assign lwc_sdiReceiver_fifof$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_ascon_finalADStep_59_THEN_ascon_asconState__ETC___d319 =
	     ascon_finalADStep ?
	       { ascon_asconState[319:1], ~ascon_asconState[0] } :
	       { ascon_asconState[319:128], x__h5511, x__h5533 } ;
  assign IF_ascon_inEmptyType_2_THEN_0_ELSE_IF_ascon_in_ETC___d106 =
	     ascon_inEmptyType ?
	       3'd0 :
	       (ascon_inLastOfType ?
		  IF_ascon_inLastBlockPadded_4_THEN_IF_ascon_inP_ETC___d104 :
		  3'd4) ;
  assign IF_ascon_inEmptyType_2_THEN_0_ELSE_IF_ascon_in_ETC___d27 =
	     ascon_inEmptyType ?
	       2'd0 :
	       (ascon_inLastOfType ?
		  (ascon_inLastBlockPadded ? 2'd0 : 2'd2) :
		  2'd1) ;
  assign IF_ascon_inEmptyType_2_THEN_12_ELSE_IF_ascon_i_ETC___d38 =
	     ascon_inEmptyType ?
	       4'd12 :
	       (ascon_inLastOfType ?
		  (ascon_inLastBlockPadded ? 4'd12 : 4'd8) :
		  4'd8) ;
  assign IF_ascon_inEmptyType_2_THEN_ascon_asconState_2_ETC___d94 =
	     ascon_inEmptyType ?
	       ascon_asconState[319:192] :
	       { newState_x0__h2967, newState_x1__h2968 } ;
  assign IF_ascon_inLastBlockPadded_4_THEN_IF_ascon_inP_ETC___d104 =
	     ascon_inLastBlockPadded ?
	       (ascon_inPaddedBlockZero ? 3'd0 : ascon_bdiValidBytes) :
	       3'd4 ;
  assign IF_ascon_inRecvType_3_EQ_5_7_OR_ascon_inRecvTy_ETC___d143 =
	     { CASE_ascon_inRecvType_4_x1_avValue_fst_x2052_5_ETC__q3,
	       CASE_ascon_inRecvType_4_x1_avValue_fst_x3053_5_ETC__q4,
	       ascon_asconState[63:0] } ;
  assign IF_ascon_initStep_57_THEN_ascon_asconState_2_B_ETC___d320 =
	     ascon_initStep ?
	       { ascon_asconState[319:128], x__h5511, x__h5533 } :
	       IF_ascon_finalADStep_59_THEN_ascon_asconState__ETC___d319 ;
  assign IF_ascon_roundCounter_52_EQ_0_53_THEN_IF_ascon_ETC___d321 =
	     (ascon_roundCounter == 4'd0) ?
	       IF_ascon_initStep_57_THEN_ascon_asconState_2_B_ETC___d320 :
	       { x__h8195, x__h9337, x__h9453, x__h9569, x__h9684 } ;
  assign IF_lwc_inSegType_37_EQ_5_40_AND_lwc_inSegEoT_8_ETC___d544 =
	     (lwc_inSegType == 4'd5 && lwc_inSegEoT) ?
	       4'd5 :
	       (lwc_inSegLast ? 4'd0 : 4'd2) ;
  assign INV_ascon_asconState_2_BITS_191_TO_136_76_CONC_ETC___d232 =
	     x__h8938 ^ y__h8939 ;
  assign NOT_ascon_roundCounter_52_EQ_0_53_70_OR_ascon__ETC___d173 =
	     ascon_roundCounter != 4'd0 || ascon_finalADStep ||
	     ascon_initStep ||
	     ascon_emitTag ;
  assign NOT_lwc_outCounter_03_BITS_13_TO_1_08_EQ_0_09__ETC___d641 =
	     lwc_outCounter[13:1] != 13'd0 ||
	     lwc_outRemainder != 2'd0 && lwc_outCounter[0] ||
	     lwc_outSegType == 4'd4 && lwc_outSegLast ;
  assign NOT_lwc_tagFifo_rv_port0__read__94_BITS_31_TO__ETC___d607 =
	     lwc_tagFifo_rv[31:0] != ascon_piso_vec[127:96] ;
  assign _dand2ascon_inState$EN_write =
	     (WILL_FIRE_RL_lwc_rl_feed_core_pdi ||
	      WILL_FIRE_RL_lwc_rl_feed_core_sdi) &&
	     (ascon_sipo_count_reg[1] && ascon_sipo_count_reg[0] ||
	      lwc_inWordCounter_82_BITS_13_TO_1_85_EQ_0_86_A_ETC___d495) ;
  assign _dfoo1 =
	     lwc_doSender_fifof_cntr_r != 2'd2 ||
	     lwc_doSender_fifof_cntr_r_71_MINUS_1___d380 == 2'd1 ;
  assign _dfoo3 =
	     lwc_doSender_fifof_cntr_r != 2'd1 ||
	     lwc_doSender_fifof_cntr_r_71_MINUS_1___d380 == 2'd0 ;
  assign ascon_inRecvType_3_EQ_1_9_AND_NOT_ascon_inEmpt_ETC___d45 =
	     ascon_inRecvType == 4'd1 && !ascon_inEmptyType &&
	     ascon_inLastBlockPadded &&
	     ascon_inLastOfType ;
  assign ascon_inRecvType_3_EQ_1_9_AND_NOT_ascon_inEmpt_ETC___d71 =
	     ascon_inRecvType == 4'd1 && !ascon_inEmptyType &&
	     !ascon_inLastBlockPadded &&
	     ascon_inLastOfType ;
  assign ascon_inRecvType_3_EQ_1_9_AND_ascon_inEmptyTyp_ETC___d50 =
	     ascon_inRecvType == 4'd1 &&
	     (ascon_inEmptyType ||
	      ascon_inLastBlockPadded && ascon_inLastOfType) ;
  assign ascon_inRecvType_3_EQ_4_8_AND_NOT_ascon_inEmpt_ETC___d44 =
	     ascon_inRecvType == 4'd4 && !ascon_inEmptyType &&
	     ascon_inLastBlockPadded &&
	     ascon_inLastOfType ;
  assign ascon_inRecvType_3_EQ_5_7_AND_NOT_ascon_inEmpt_ETC___d43 =
	     ascon_inRecvType == 4'd5 && !ascon_inEmptyType &&
	     ascon_inLastBlockPadded &&
	     ascon_inLastOfType ;
  assign ascon_roundCounter_52_EQ_0_53_AND_ascon_emitTa_ETC___d334 =
	     ascon_roundCounter == 4'd0 && ascon_emitTag && !ascon_initStep &&
	     !ascon_finalADStep ;
  assign ascon_roundCounter_52_EQ_2_54_AND_NOT_ascon_em_ETC___d163 =
	     ascon_roundCounter == 4'd2 && !ascon_emitTag &&
	     !ascon_initStep &&
	     !ascon_finalADStep ;
  assign ascon_roundCounter_52_MINUS_1___d179 = ascon_roundCounter - 4'd1 ;
  assign b__h15559 = { lwc_sdiReceiver_fifof$D_OUT[31:24], 24'd8388608 } ;
  assign b__h15566 = { lwc_sdiReceiver_fifof$D_OUT[31:16], 16'd32768 } ;
  assign b__h15569 = { lwc_sdiReceiver_fifof$D_OUT[31:8], 8'd128 } ;
  assign b__h16515 = { lwc_pdiReceiver_fifof$D_OUT[31:24], 24'd8388608 } ;
  assign b__h16522 = { lwc_pdiReceiver_fifof$D_OUT[31:16], 16'd32768 } ;
  assign b__h16525 = { lwc_pdiReceiver_fifof$D_OUT[31:8], 8'd128 } ;
  assign b__h18803 = { ascon_piso_vec[127:120], 24'd0 } ;
  assign b__h18810 = { ascon_piso_vec[127:112], 16'd0 } ;
  assign b__h18813 = { ascon_piso_vec[127:104], 8'd0 } ;
  assign lwc_doSender_fifof_cntr_r_71_MINUS_1___d380 =
	     lwc_doSender_fifof_cntr_r - 2'd1 ;
  assign lwc_inWordCounter_82_BITS_13_TO_1_85_EQ_0_86_A_ETC___d495 =
	     lwc_inWordCounter[13:1] == 13'd0 && lwc_inSegEoT &&
	     !lwc_inWordCounter[0] ||
	     lwc_finalRemainBytes == 2'd0 &&
	     lwc_inWordCounter[13:1] == 13'd0 &&
	     lwc_inSegEoT ;
  assign newState___1_x2__h4030 =
	     ascon_asconState[191:128] ^ ascon_keyR[127:64] ;
  assign newState_x0__h2967 =
	     ascon_asconState[319:256] ^ ascon_sipo_vec[127:64] ;
  assign newState_x1__h2968 =
	     ascon_asconState[255:192] ^ ascon_sipo_vec[63:0] ;
  assign newState_x3__h3142 = ascon_asconState[127:64] ^ ascon_keyR[63:0] ;
  assign newState_x4__h2213 =
	     { ascon_asconState[63:1], ~ascon_asconState[0] } ;
  assign spliced_bits__h8475 =
	     ascon_asconState[135:128] ^
	     CASE_ascon_roundCounter_52_MINUS_1_79_0_0x4B_1_ETC__q1 ;
  assign spliced_bits__h8901 =
	     INV_ascon_asconState_2_BITS_191_TO_136_76_CONC_ETC___d232[7:0] ^
	     CASE_x480_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 ;
  assign state_x0__h8267 = t0__h8247 ^ y__h8314 ;
  assign state_x0__h8330 = x__h8376 ^ y__h8377 ;
  assign state_x0__h8402 = t0__h6635 ^ y__h8449 ;
  assign state_x1__h8278 = t1__h8248 ^ y__h9363 ;
  assign state_x1__h8413 = ascon_asconState[255:192] ^ y__h8809 ;
  assign state_x2__h8264 = y__h8782 ^ y__h9479 ;
  assign state_x2__h8322 =
	     { INV_ascon_asconState_2_BITS_191_TO_136_76_CONC_ETC___d232[63:8],
	       spliced_bits__h8901 } ;
  assign state_x2__h8399 = y__h8471 ^ y__h7338 ;
  assign state_x2__h8457 =
	     { ascon_asconState[191:136], spliced_bits__h8475 } ;
  assign state_x3__h6663 = ascon_asconState[127:64] ^ y__h7547 ;
  assign state_x3__h8275 = state_x3__h8328 ^ y__h9595 ;
  assign state_x3__h8328 = x__h9147 ^ y__h9148 ;
  assign state_x4__h6582 = state_x4__h6659 ^ y__h7080 ;
  assign state_x4__h6659 = x__h6979 ^ y__h6980 ;
  assign state_x4__h8271 = x__h9134 ^ y__h9135 ;
  assign t0__h6635 = ascon_asconState[319:256] ^ ascon_asconState[63:0] ;
  assign t0__h8247 = state_x0__h8330 ^ state_x4__h6582 ;
  assign t1__h8248 = x__h8795 ^ y__h8796 ;
  assign x1_avValue_fst_x2__h4042 =
	     ascon_inLastBlockPadded ?
	       newState___1_x2__h4030 :
	       ascon_asconState[191:128] ;
  assign x1_avValue_fst_x2__h4047 =
	     ascon_inLastOfType ?
	       x1_avValue_fst_x2__h4042 :
	       ascon_asconState[191:128] ;
  assign x1_avValue_fst_x2__h4052 =
	     ascon_inEmptyType ?
	       newState___1_x2__h4030 :
	       x1_avValue_fst_x2__h4047 ;
  assign x1_avValue_fst_x3__h4043 =
	     ascon_inLastBlockPadded ?
	       newState_x3__h3142 :
	       ascon_asconState[127:64] ;
  assign x1_avValue_fst_x3__h4048 =
	     ascon_inLastOfType ?
	       x1_avValue_fst_x3__h4043 :
	       ascon_asconState[127:64] ;
  assign x1_avValue_fst_x3__h4053 =
	     ascon_inEmptyType ?
	       newState_x3__h3142 :
	       x1_avValue_fst_x3__h4048 ;
  assign x1_avValue_x0__h2980 =
	     ascon_inEmptyType ?
	       ascon_asconState[319:256] :
	       newState_x0__h2967 ;
  assign x1_avValue_x1__h2981 =
	     ascon_inEmptyType ?
	       ascon_asconState[255:192] :
	       newState_x1__h2968 ;
  assign x1_avValue_x4__h2984 =
	     ascon_inEmptyType ? newState_x4__h2213 : ascon_asconState[63:0] ;
  assign x__h18779 =
	     (ascon_piso_countReg == 3'd1 && ascon_inLastOfType) ?
	       IF_ascon_outPadarg_15_EQ_0_16_THEN_ascon_piso__ETC___d627 :
	       ascon_piso_vec[127:96] ;
  assign x__h18996 = lwc_outCounter - 14'd1 ;
  assign x__h4500 =
	     (ascon_inRecvType == 4'd5 && !ascon_inLastBlockPadded) ?
	       ascon_sipo_vec[127:64] :
	       x1_avValue_fst_x0__h4058 ;
  assign x__h4546 =
	     (ascon_inRecvType == 4'd5 && !ascon_inLastBlockPadded) ?
	       ascon_sipo_vec[63:0] :
	       x1_avValue_fst_x1__h4059 ;
  assign x__h5511 = ascon_asconState[127:64] ^ ascon_keyR[127:64] ;
  assign x__h5533 = ascon_asconState[63:0] ^ ascon_keyR[63:0] ;
  assign x__h6723 = ~ascon_asconState[255:192] ;
  assign x__h6979 = ascon_asconState[63:0] ^ ascon_asconState[127:64] ;
  assign x__h6981 = ~t0__h6635 ;
  assign x__h7081 = { state_x4__h6659[6:0], state_x4__h6659[63:7] } ;
  assign x__h7339 = ~ascon_asconState[127:64] ;
  assign x__h7480 = ascon_roundCounter_52_MINUS_1___d179 - 4'd1 ;
  assign x__h7548 = ~x__h6979 ;
  assign x__h8195 = x__h8241 ^ y__h8242 ;
  assign x__h8241 = state_x0__h8267 ^ state_x4__h8271 ;
  assign x__h8376 = state_x0__h8402 ^ state_x4__h6659 ;
  assign x__h8596 = { x__h8376[18:0], x__h8376[63:19] } ;
  assign x__h8781 = ~t1__h8248 ;
  assign x__h8795 = state_x1__h8413 ^ state_x0__h8402 ;
  assign x__h8810 = ~y__h8471 ;
  assign x__h8813 = { x__h8795[60:0], x__h8795[63:61] } ;
  assign x__h8938 = ~state_x2__h8399 ;
  assign x__h8956 = { x__h8938[0], x__h8938[63:1] } ;
  assign x__h9134 = state_x4__h6582 ^ state_x3__h8328 ;
  assign x__h9147 = state_x3__h6663 ^ state_x2__h8399 ;
  assign x__h9164 = { x__h9147[9:0], x__h9147[63:10] } ;
  assign x__h9250 = ~t0__h8247 ;
  assign x__h9251 = { x__h8241[18:0], x__h8241[63:19] } ;
  assign x__h9337 = x__h9349 ^ y__h9350 ;
  assign x__h9349 = state_x1__h8278 ^ state_x0__h8267 ;
  assign x__h9364 = ~y__h8782 ;
  assign x__h9367 = { x__h9349[60:0], x__h9349[63:61] } ;
  assign x__h9453 = x__h9465 ^ y__h9466 ;
  assign x__h9465 = ~state_x2__h8264 ;
  assign x__h9480 = ~state_x3__h8328 ;
  assign x__h9483 = { x__h9465[0], x__h9465[63:1] } ;
  assign x__h9569 = x__h9581 ^ y__h9582 ;
  assign x__h9581 = state_x3__h8275 ^ state_x2__h8264 ;
  assign x__h9596 = ~x__h9134 ;
  assign x__h9598 = { x__h9581[9:0], x__h9581[63:10] } ;
  assign x__h9684 = state_x4__h8271 ^ y__h9697 ;
  assign x__h9698 = { state_x4__h8271[6:0], state_x4__h8271[63:7] } ;
  assign y__h6980 = x__h6981 & ascon_asconState[255:192] ;
  assign y__h7080 = x__h7081 ^ y__h7082 ;
  assign y__h7082 = { state_x4__h6659[40:0], state_x4__h6659[63:41] } ;
  assign y__h7338 = x__h7339 & x__h6979 ;
  assign y__h7547 = x__h7548 & t0__h6635 ;
  assign y__h8242 = x__h9251 ^ y__h9252 ;
  assign y__h8314 = x__h8781 & y__h8782 ;
  assign y__h8377 = x__h8596 ^ y__h8597 ;
  assign y__h8449 = x__h6723 & y__h8471 ;
  assign y__h8471 = state_x2__h8457 ^ ascon_asconState[255:192] ;
  assign y__h8597 = { x__h8376[27:0], x__h8376[63:28] } ;
  assign y__h8782 = state_x2__h8322 ^ t1__h8248 ;
  assign y__h8796 = x__h8813 ^ y__h8814 ;
  assign y__h8809 = x__h8810 & ascon_asconState[127:64] ;
  assign y__h8814 = { x__h8795[38:0], x__h8795[63:39] } ;
  assign y__h8939 = x__h8956 ^ y__h8957 ;
  assign y__h8957 = { x__h8938[5:0], x__h8938[63:6] } ;
  assign y__h9135 = x__h9250 & t1__h8248 ;
  assign y__h9148 = x__h9164 ^ y__h9165 ;
  assign y__h9165 = { x__h9147[16:0], x__h9147[63:17] } ;
  assign y__h9252 = { x__h8241[27:0], x__h8241[63:28] } ;
  assign y__h9350 = x__h9367 ^ y__h9368 ;
  assign y__h9363 = x__h9364 & state_x3__h8328 ;
  assign y__h9368 = { x__h9349[38:0], x__h9349[63:39] } ;
  assign y__h9466 = x__h9483 ^ y__h9484 ;
  assign y__h9479 = x__h9480 & x__h9134 ;
  assign y__h9484 = { x__h9465[5:0], x__h9465[63:6] } ;
  assign y__h9582 = x__h9598 ^ y__h9599 ;
  assign y__h9595 = x__h9596 & t0__h8247 ;
  assign y__h9599 = { x__h9581[16:0], x__h9581[63:17] } ;
  assign y__h9697 = x__h9698 ^ y__h9699 ;
  assign y__h9699 = { state_x4__h8271[40:0], state_x4__h8271[63:41] } ;
  always@(ascon_inRecvType or
	  ascon_asconState or x1_avValue_x0__h2980 or newState_x0__h2967)
  begin
    case (ascon_inRecvType)
      4'd1: x1_avValue_fst_x0__h4058 = x1_avValue_x0__h2980;
      4'd4, 4'd5: x1_avValue_fst_x0__h4058 = newState_x0__h2967;
      4'd12: x1_avValue_fst_x0__h4058 = ascon_asconState[319:256];
      4'd13: x1_avValue_fst_x0__h4058 = 64'h80800C0800000000;
      default: x1_avValue_fst_x0__h4058 = ascon_asconState[319:256];
    endcase
  end
  always@(ascon_inRecvType or
	  ascon_asconState or
	  x1_avValue_x1__h2981 or newState_x1__h2968 or ascon_keyR)
  begin
    case (ascon_inRecvType)
      4'd1: x1_avValue_fst_x1__h4059 = x1_avValue_x1__h2981;
      4'd4, 4'd5: x1_avValue_fst_x1__h4059 = newState_x1__h2968;
      4'd12: x1_avValue_fst_x1__h4059 = ascon_asconState[255:192];
      4'd13: x1_avValue_fst_x1__h4059 = ascon_keyR[127:64];
      default: x1_avValue_fst_x1__h4059 = ascon_asconState[255:192];
    endcase
  end
  always@(ascon_roundCounter_52_MINUS_1___d179)
  begin
    case (ascon_roundCounter_52_MINUS_1___d179)
      4'd0: CASE_ascon_roundCounter_52_MINUS_1_79_0_0x4B_1_ETC__q1 = 8'h4B;
      4'd1: CASE_ascon_roundCounter_52_MINUS_1_79_0_0x4B_1_ETC__q1 = 8'h5A;
      4'd2: CASE_ascon_roundCounter_52_MINUS_1_79_0_0x4B_1_ETC__q1 = 8'h69;
      4'd3: CASE_ascon_roundCounter_52_MINUS_1_79_0_0x4B_1_ETC__q1 = 8'h78;
      4'd4: CASE_ascon_roundCounter_52_MINUS_1_79_0_0x4B_1_ETC__q1 = 8'h87;
      4'd5: CASE_ascon_roundCounter_52_MINUS_1_79_0_0x4B_1_ETC__q1 = 8'h96;
      4'd6: CASE_ascon_roundCounter_52_MINUS_1_79_0_0x4B_1_ETC__q1 = 8'hA5;
      4'd7: CASE_ascon_roundCounter_52_MINUS_1_79_0_0x4B_1_ETC__q1 = 8'hB4;
      4'd8: CASE_ascon_roundCounter_52_MINUS_1_79_0_0x4B_1_ETC__q1 = 8'hC3;
      4'd9: CASE_ascon_roundCounter_52_MINUS_1_79_0_0x4B_1_ETC__q1 = 8'hD2;
      4'd10: CASE_ascon_roundCounter_52_MINUS_1_79_0_0x4B_1_ETC__q1 = 8'hE1;
      4'd11: CASE_ascon_roundCounter_52_MINUS_1_79_0_0x4B_1_ETC__q1 = 8'hF0;
      default: CASE_ascon_roundCounter_52_MINUS_1_79_0_0x4B_1_ETC__q1 =
		   8'bxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h7480)
  begin
    case (x__h7480)
      4'd0: CASE_x480_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 = 8'h4B;
      4'd1: CASE_x480_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 = 8'h5A;
      4'd2: CASE_x480_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 = 8'h69;
      4'd3: CASE_x480_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 = 8'h78;
      4'd4: CASE_x480_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 = 8'h87;
      4'd5: CASE_x480_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 = 8'h96;
      4'd6: CASE_x480_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 = 8'hA5;
      4'd7: CASE_x480_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 = 8'hB4;
      4'd8: CASE_x480_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 = 8'hC3;
      4'd9: CASE_x480_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 = 8'hD2;
      4'd10: CASE_x480_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 = 8'hE1;
      4'd11: CASE_x480_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 = 8'hF0;
      default: CASE_x480_0_0x4B_1_0x5A_2_0x69_3_0x78_4_0x87_5_ETC__q2 =
		   8'bxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(lwc_finalRemainBytes or
	  b__h16525 or lwc_pdiReceiver_fifof$D_OUT or b__h16515 or b__h16522)
  begin
    case (lwc_finalRemainBytes)
      2'd0:
	  IF_lwc_finalRemainBytes_84_EQ_0_92_THEN_lwc_pd_ETC___d534 =
	      lwc_pdiReceiver_fifof$D_OUT;
      2'd1:
	  IF_lwc_finalRemainBytes_84_EQ_0_92_THEN_lwc_pd_ETC___d534 =
	      b__h16515;
      2'd2:
	  IF_lwc_finalRemainBytes_84_EQ_0_92_THEN_lwc_pd_ETC___d534 =
	      b__h16522;
      2'd3:
	  IF_lwc_finalRemainBytes_84_EQ_0_92_THEN_lwc_pd_ETC___d534 =
	      b__h16525;
    endcase
  end
  always@(lwc_finalRemainBytes or
	  b__h15569 or lwc_sdiReceiver_fifof$D_OUT or b__h15559 or b__h15566)
  begin
    case (lwc_finalRemainBytes)
      2'd0:
	  IF_lwc_finalRemainBytes_84_EQ_0_92_THEN_lwc_sd_ETC___d506 =
	      lwc_sdiReceiver_fifof$D_OUT;
      2'd1:
	  IF_lwc_finalRemainBytes_84_EQ_0_92_THEN_lwc_sd_ETC___d506 =
	      b__h15559;
      2'd2:
	  IF_lwc_finalRemainBytes_84_EQ_0_92_THEN_lwc_sd_ETC___d506 =
	      b__h15566;
      2'd3:
	  IF_lwc_finalRemainBytes_84_EQ_0_92_THEN_lwc_sd_ETC___d506 =
	      b__h15569;
    endcase
  end
  always@(ascon_outPadarg or
	  b__h18813 or ascon_piso_vec or b__h18803 or b__h18810)
  begin
    case (ascon_outPadarg)
      2'd0:
	  IF_ascon_outPadarg_15_EQ_0_16_THEN_ascon_piso__ETC___d627 =
	      ascon_piso_vec[127:96];
      2'd1:
	  IF_ascon_outPadarg_15_EQ_0_16_THEN_ascon_piso__ETC___d627 =
	      b__h18803;
      2'd2:
	  IF_ascon_outPadarg_15_EQ_0_16_THEN_ascon_piso__ETC___d627 =
	      b__h18810;
      2'd3:
	  IF_ascon_outPadarg_15_EQ_0_16_THEN_ascon_piso__ETC___d627 =
	      b__h18813;
    endcase
  end
  always@(ascon_inRecvType or ascon_asconState or x1_avValue_fst_x2__h4052)
  begin
    case (ascon_inRecvType)
      4'd4, 4'd5:
	  CASE_ascon_inRecvType_4_x1_avValue_fst_x2052_5_ETC__q3 =
	      x1_avValue_fst_x2__h4052;
      default: CASE_ascon_inRecvType_4_x1_avValue_fst_x2052_5_ETC__q3 =
		   ascon_asconState[191:128];
    endcase
  end
  always@(ascon_inRecvType or ascon_asconState or x1_avValue_fst_x3__h4053)
  begin
    case (ascon_inRecvType)
      4'd4, 4'd5:
	  CASE_ascon_inRecvType_4_x1_avValue_fst_x3053_5_ETC__q4 =
	      x1_avValue_fst_x3__h4053;
      default: CASE_ascon_inRecvType_4_x1_avValue_fst_x3053_5_ETC__q4 =
		   ascon_asconState[127:64];
    endcase
  end
  always@(ascon_inRecvType or
	  IF_ascon_inRecvType_3_EQ_5_7_OR_ascon_inRecvTy_ETC___d143 or
	  ascon_asconState or
	  x1_avValue_x4__h2984 or ascon_keyR or ascon_sipo_vec)
  begin
    case (ascon_inRecvType)
      4'd1:
	  IF_ascon_inRecvType_3_EQ_12_5_THEN_ascon_ascon_ETC___d146 =
	      { ascon_asconState[191:64], x1_avValue_x4__h2984 };
      4'd12:
	  IF_ascon_inRecvType_3_EQ_12_5_THEN_ascon_ascon_ETC___d146 =
	      ascon_asconState[191:0];
      4'd13:
	  IF_ascon_inRecvType_3_EQ_12_5_THEN_ascon_ascon_ETC___d146 =
	      { ascon_keyR[63:0], ascon_sipo_vec };
      default: IF_ascon_inRecvType_3_EQ_12_5_THEN_ascon_ascon_ETC___d146 =
		   IF_ascon_inRecvType_3_EQ_5_7_OR_ascon_inRecvTy_ETC___d143;
    endcase
  end
  always@(lwc_pdiReceiver_fifof$D_OUT or lwc_headersFifo_rv$port1__read)
  begin
    case (lwc_pdiReceiver_fifof$D_OUT[31:28])
      4'd4, 4'd5:
	  CASE_lwc_pdiReceiver_fifofD_OUT_BITS_31_TO_28_ETC__q5 =
	      !lwc_headersFifo_rv$port1__read[32];
      default: CASE_lwc_pdiReceiver_fifofD_OUT_BITS_31_TO_28_ETC__q5 =
		   lwc_pdiReceiver_fifof$D_OUT[31:28] != 4'd7 ||
		   !lwc_pdiReceiver_fifof$D_OUT[24] ||
		   !lwc_headersFifo_rv$port1__read[32];
    endcase
  end

  // handling of inlined registers

  always@(posedge clk)
  begin
    if (rst == `BSV_RESET_VALUE)
      begin
        ascon_inState <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ascon_piso_countReg <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ascon_sipo_count_reg <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ascon_xState <= `BSV_ASSIGNMENT_DELAY 2'd0;
	lwc_doSender_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	lwc_doSender_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	lwc_doSender_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	lwc_headersFifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	lwc_inState <= `BSV_ASSIGNMENT_DELAY 4'd0;
	lwc_outState <= `BSV_ASSIGNMENT_DELAY 2'd0;
	lwc_statFailure <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lwc_tagFifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
      end
    else
      begin
        if (ascon_inState$EN)
	  ascon_inState <= `BSV_ASSIGNMENT_DELAY ascon_inState$D_IN;
	if (ascon_piso_countReg$EN)
	  ascon_piso_countReg <= `BSV_ASSIGNMENT_DELAY
	      ascon_piso_countReg$D_IN;
	if (ascon_sipo_count_reg$EN)
	  ascon_sipo_count_reg <= `BSV_ASSIGNMENT_DELAY
	      ascon_sipo_count_reg$D_IN;
	if (ascon_xState$EN)
	  ascon_xState <= `BSV_ASSIGNMENT_DELAY ascon_xState$D_IN;
	if (lwc_doSender_fifof_cntr_r$EN)
	  lwc_doSender_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      lwc_doSender_fifof_cntr_r$D_IN;
	if (lwc_doSender_fifof_q_0$EN)
	  lwc_doSender_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      lwc_doSender_fifof_q_0$D_IN;
	if (lwc_doSender_fifof_q_1$EN)
	  lwc_doSender_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      lwc_doSender_fifof_q_1$D_IN;
	if (lwc_headersFifo_rv$EN)
	  lwc_headersFifo_rv <= `BSV_ASSIGNMENT_DELAY lwc_headersFifo_rv$D_IN;
	if (lwc_inState$EN)
	  lwc_inState <= `BSV_ASSIGNMENT_DELAY lwc_inState$D_IN;
	if (lwc_outState$EN)
	  lwc_outState <= `BSV_ASSIGNMENT_DELAY lwc_outState$D_IN;
	if (lwc_statFailure$EN)
	  lwc_statFailure <= `BSV_ASSIGNMENT_DELAY lwc_statFailure$D_IN;
	if (lwc_tagFifo_rv$EN)
	  lwc_tagFifo_rv <= `BSV_ASSIGNMENT_DELAY lwc_tagFifo_rv$D_IN;
      end
    if (ascon_asconState$EN)
      ascon_asconState <= `BSV_ASSIGNMENT_DELAY ascon_asconState$D_IN;
    if (ascon_bdiValidBytes$EN)
      ascon_bdiValidBytes <= `BSV_ASSIGNMENT_DELAY ascon_bdiValidBytes$D_IN;
    if (ascon_emitTag$EN)
      ascon_emitTag <= `BSV_ASSIGNMENT_DELAY ascon_emitTag$D_IN;
    if (ascon_finalADStep$EN)
      ascon_finalADStep <= `BSV_ASSIGNMENT_DELAY ascon_finalADStep$D_IN;
    if (ascon_inEmptyType$EN)
      ascon_inEmptyType <= `BSV_ASSIGNMENT_DELAY ascon_inEmptyType$D_IN;
    if (ascon_inLastBlockPadded$EN)
      ascon_inLastBlockPadded <= `BSV_ASSIGNMENT_DELAY
	  ascon_inLastBlockPadded$D_IN;
    if (ascon_inLastOfType$EN)
      ascon_inLastOfType <= `BSV_ASSIGNMENT_DELAY ascon_inLastOfType$D_IN;
    if (ascon_inPadarg$EN)
      ascon_inPadarg <= `BSV_ASSIGNMENT_DELAY ascon_inPadarg$D_IN;
    if (ascon_inPaddedBlockZero$EN)
      ascon_inPaddedBlockZero <= `BSV_ASSIGNMENT_DELAY
	  ascon_inPaddedBlockZero$D_IN;
    if (ascon_inRecvType$EN)
      ascon_inRecvType <= `BSV_ASSIGNMENT_DELAY ascon_inRecvType$D_IN;
    if (ascon_initStep$EN)
      ascon_initStep <= `BSV_ASSIGNMENT_DELAY ascon_initStep$D_IN;
    if (ascon_keyR$EN) ascon_keyR <= `BSV_ASSIGNMENT_DELAY ascon_keyR$D_IN;
    if (ascon_outPadarg$EN)
      ascon_outPadarg <= `BSV_ASSIGNMENT_DELAY ascon_outPadarg$D_IN;
    if (ascon_piso_vec$EN)
      ascon_piso_vec <= `BSV_ASSIGNMENT_DELAY ascon_piso_vec$D_IN;
    if (ascon_roundCounter$EN)
      ascon_roundCounter <= `BSV_ASSIGNMENT_DELAY ascon_roundCounter$D_IN;
    if (ascon_sipo_vec$EN)
      ascon_sipo_vec <= `BSV_ASSIGNMENT_DELAY ascon_sipo_vec$D_IN;
    if (lwc_finalRemainBytes$EN)
      lwc_finalRemainBytes <= `BSV_ASSIGNMENT_DELAY lwc_finalRemainBytes$D_IN;
    if (lwc_inSegEoT$EN)
      lwc_inSegEoT <= `BSV_ASSIGNMENT_DELAY lwc_inSegEoT$D_IN;
    if (lwc_inSegLast$EN)
      lwc_inSegLast <= `BSV_ASSIGNMENT_DELAY lwc_inSegLast$D_IN;
    if (lwc_inSegType$EN)
      lwc_inSegType <= `BSV_ASSIGNMENT_DELAY lwc_inSegType$D_IN;
    if (lwc_inWordCounter$EN)
      lwc_inWordCounter <= `BSV_ASSIGNMENT_DELAY lwc_inWordCounter$D_IN;
    if (lwc_outCounter$EN)
      lwc_outCounter <= `BSV_ASSIGNMENT_DELAY lwc_outCounter$D_IN;
    if (lwc_outRemainder$EN)
      lwc_outRemainder <= `BSV_ASSIGNMENT_DELAY lwc_outRemainder$D_IN;
    if (lwc_outSegLast$EN)
      lwc_outSegLast <= `BSV_ASSIGNMENT_DELAY lwc_outSegLast$D_IN;
    if (lwc_outSegType$EN)
      lwc_outSegType <= `BSV_ASSIGNMENT_DELAY lwc_outSegType$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ascon_asconState =
	320'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ascon_bdiValidBytes = 3'h2;
    ascon_emitTag = 1'h0;
    ascon_finalADStep = 1'h0;
    ascon_inEmptyType = 1'h0;
    ascon_inLastBlockPadded = 1'h0;
    ascon_inLastOfType = 1'h0;
    ascon_inPadarg = 2'h2;
    ascon_inPaddedBlockZero = 1'h0;
    ascon_inRecvType = 4'hA;
    ascon_inState = 2'h2;
    ascon_initStep = 1'h0;
    ascon_keyR = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ascon_outPadarg = 2'h2;
    ascon_piso_countReg = 3'h2;
    ascon_piso_vec = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ascon_roundCounter = 4'hA;
    ascon_sipo_count_reg = 3'h2;
    ascon_sipo_vec = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ascon_xState = 2'h2;
    lwc_doSender_fifof_cntr_r = 2'h2;
    lwc_doSender_fifof_q_0 = 33'h0AAAAAAAA;
    lwc_doSender_fifof_q_1 = 33'h0AAAAAAAA;
    lwc_finalRemainBytes = 2'h2;
    lwc_headersFifo_rv = 33'h0AAAAAAAA;
    lwc_inSegEoT = 1'h0;
    lwc_inSegLast = 1'h0;
    lwc_inSegType = 4'hA;
    lwc_inState = 4'hA;
    lwc_inWordCounter = 14'h2AAA;
    lwc_outCounter = 14'h2AAA;
    lwc_outRemainder = 2'h2;
    lwc_outSegLast = 1'h0;
    lwc_outSegType = 4'hA;
    lwc_outState = 2'h2;
    lwc_statFailure = 1'h0;
    lwc_tagFifo_rv = 33'h0AAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge clk)
  begin
    #0;
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze)
	begin
	  v__h767 = $time;
	  #0;
	end
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze)
	$display("ABSORB SQUEEZE ", v__h767);
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze && ascon_inRecvType == 4'd1 &&
	  ascon_inEmptyType)
	begin
	  v__h1697 = $time;
	  #0;
	end
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze && ascon_inRecvType == 4'd1 &&
	  ascon_inEmptyType)
	$display("Domain sep - Empty AD ", v__h1697);
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze && ascon_inRecvType == 4'd1 &&
	  ascon_inEmptyType)
	$write("%s\n", "DSB ");
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze && ascon_inRecvType == 4'd1 &&
	  ascon_inEmptyType)
	$write("%08x %08x\n",
	       ascon_asconState[319:288],
	       ascon_asconState[287:256]);
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze && ascon_inRecvType == 4'd1 &&
	  ascon_inEmptyType)
	$write("%08x %08x\n",
	       ascon_asconState[255:224],
	       ascon_asconState[223:192]);
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze && ascon_inRecvType == 4'd1 &&
	  ascon_inEmptyType)
	$write("%08x %08x\n",
	       ascon_asconState[191:160],
	       ascon_asconState[159:128]);
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze && ascon_inRecvType == 4'd1 &&
	  ascon_inEmptyType)
	$write("%08x %08x\n",
	       ascon_asconState[127:96],
	       ascon_asconState[95:64]);
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze && ascon_inRecvType == 4'd1 &&
	  ascon_inEmptyType)
	$write("%08x %08x\n",
	       ascon_asconState[63:32],
	       ascon_asconState[31:0]);
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze && ascon_inRecvType == 4'd1 &&
	  ascon_inEmptyType)
	$write("-");
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze && ascon_inRecvType == 4'd1 &&
	  ascon_inEmptyType)
	$display("");
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze && ascon_inRecvType == 4'd1 &&
	  ascon_inEmptyType)
	$display(1'b0);
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze && ascon_inRecvType == 4'd1 &&
	  ascon_inEmptyType)
	$write("%s\n", "DSA ");
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze && ascon_inRecvType == 4'd1 &&
	  ascon_inEmptyType)
	$write("%08x %08x\n",
	       ascon_asconState[319:288],
	       ascon_asconState[287:256]);
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze && ascon_inRecvType == 4'd1 &&
	  ascon_inEmptyType)
	$write("%08x %08x\n",
	       ascon_asconState[255:224],
	       ascon_asconState[223:192]);
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze && ascon_inRecvType == 4'd1 &&
	  ascon_inEmptyType)
	$write("%08x %08x\n",
	       ascon_asconState[191:160],
	       ascon_asconState[159:128]);
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze && ascon_inRecvType == 4'd1 &&
	  ascon_inEmptyType)
	$write("%08x %08x\n",
	       ascon_asconState[127:96],
	       ascon_asconState[95:64]);
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze && ascon_inRecvType == 4'd1 &&
	  ascon_inEmptyType)
	$write("%08x %08x\n",
	       ascon_asconState[63:32],
	       { ascon_asconState[31:1], ~ascon_asconState[0] });
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze && ascon_inRecvType == 4'd1 &&
	  ascon_inEmptyType)
	$write("-");
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze && ascon_inRecvType == 4'd1 &&
	  ascon_inEmptyType)
	$display("");
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze && ascon_inRecvType == 4'd1 &&
	  ascon_inEmptyType)
	$display(1'b0);
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	  ascon_inRecvType_3_EQ_1_9_AND_NOT_ascon_inEmpt_ETC___d45)
	begin
	  v__h2755 = $time;
	  #0;
	end
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	  ascon_inRecvType_3_EQ_1_9_AND_NOT_ascon_inEmpt_ETC___d45)
	$display("Last AD ", v__h2755);
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	  ascon_inRecvType_3_EQ_1_9_AND_NOT_ascon_inEmpt_ETC___d71)
	begin
	  v__h2863 = $time;
	  #0;
	end
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	  ascon_inRecvType_3_EQ_1_9_AND_NOT_ascon_inEmpt_ETC___d71)
	$display("Last AD block is FULL ", v__h2863);
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	  (ascon_inRecvType == 4'd5 || ascon_inRecvType == 4'd4) &&
	  ascon_inEmptyType)
	begin
	  v__h3022 = $time;
	  #0;
	end
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	  (ascon_inRecvType == 4'd5 || ascon_inRecvType == 4'd4) &&
	  ascon_inEmptyType)
	$display("Empty PT/CT ", v__h3022);
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	  (ascon_inRecvType_3_EQ_5_7_AND_NOT_ascon_inEmpt_ETC___d43 ||
	   ascon_inRecvType_3_EQ_4_8_AND_NOT_ascon_inEmpt_ETC___d44))
	begin
	  v__h3212 = $time;
	  #0;
	end
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ascon_rl_absorb_squeeze &&
	  (ascon_inRecvType_3_EQ_5_7_AND_NOT_ascon_inEmpt_ETC___d43 ||
	   ascon_inRecvType_3_EQ_4_8_AND_NOT_ascon_inEmpt_ETC___d44))
	$display("Last PT/CT ", v__h3212);
    if (rst != `BSV_RESET_VALUE)
      if (ascon_xState == 2'd1 && ascon_roundCounter == 4'd0 &&
	  ascon_initStep)
	begin
	  v__h5452 = $time;
	  #0;
	end
    if (rst != `BSV_RESET_VALUE)
      if (ascon_xState == 2'd1 && ascon_roundCounter == 4'd0 &&
	  ascon_initStep)
	$display("INIT STEP ", v__h5452);
    if (rst != `BSV_RESET_VALUE)
      if (ascon_xState == 2'd1 && ascon_roundCounter == 4'd0 &&
	  ascon_initStep)
	$write("%s\n", "Initiatiozation ");
    if (rst != `BSV_RESET_VALUE)
      if (ascon_xState == 2'd1 && ascon_roundCounter == 4'd0 &&
	  ascon_initStep)
	$write("%08x %08x\n",
	       ascon_asconState[319:288],
	       ascon_asconState[287:256]);
    if (rst != `BSV_RESET_VALUE)
      if (ascon_xState == 2'd1 && ascon_roundCounter == 4'd0 &&
	  ascon_initStep)
	$write("%08x %08x\n",
	       ascon_asconState[255:224],
	       ascon_asconState[223:192]);
    if (rst != `BSV_RESET_VALUE)
      if (ascon_xState == 2'd1 && ascon_roundCounter == 4'd0 &&
	  ascon_initStep)
	$write("%08x %08x\n",
	       ascon_asconState[191:160],
	       ascon_asconState[159:128]);
    if (rst != `BSV_RESET_VALUE)
      if (ascon_xState == 2'd1 && ascon_roundCounter == 4'd0 &&
	  ascon_initStep)
	$write("%08x %08x\n", x__h5511[63:32], x__h5511[31:0]);
    if (rst != `BSV_RESET_VALUE)
      if (ascon_xState == 2'd1 && ascon_roundCounter == 4'd0 &&
	  ascon_initStep)
	$write("%08x %08x\n", x__h5533[63:32], x__h5533[31:0]);
    if (rst != `BSV_RESET_VALUE)
      if (ascon_xState == 2'd1 && ascon_roundCounter == 4'd0 &&
	  ascon_initStep)
	$write("-");
    if (rst != `BSV_RESET_VALUE)
      if (ascon_xState == 2'd1 && ascon_roundCounter == 4'd0 &&
	  ascon_initStep)
	$display("");
    if (rst != `BSV_RESET_VALUE)
      if (ascon_xState == 2'd1 && ascon_roundCounter == 4'd0 &&
	  ascon_initStep)
	$display(1'b0);
    if (rst != `BSV_RESET_VALUE)
      if (ascon_xState == 2'd1 && ascon_roundCounter == 4'd0 &&
	  !ascon_initStep &&
	  ascon_finalADStep)
	begin
	  v__h6031 = $time;
	  #0;
	end
    if (rst != `BSV_RESET_VALUE)
      if (ascon_xState == 2'd1 && ascon_roundCounter == 4'd0 &&
	  !ascon_initStep &&
	  ascon_finalADStep)
	$display("Domain Sep ", v__h6031);
    if (rst != `BSV_RESET_VALUE)
      if (ascon_xState == 2'd1 &&
	  ascon_roundCounter_52_EQ_0_53_AND_ascon_emitTa_ETC___d334)
	begin
	  v__h6230 = $time;
	  #0;
	end
    if (rst != `BSV_RESET_VALUE)
      if (ascon_xState == 2'd1 &&
	  ascon_roundCounter_52_EQ_0_53_AND_ascon_emitTa_ETC___d334)
	$display("Emit Tag ", v__h6230);
    if (rst != `BSV_RESET_VALUE)
      if (ascon_xState == 2'd1 && ascon_roundCounter == 4'd0)
	begin
	  v__h9820 = $time;
	  #0;
	end
    if (rst != `BSV_RESET_VALUE)
      if (ascon_xState == 2'd1 && ascon_roundCounter == 4'd0)
	$display("Done ", v__h9820);
  end
  // synopsys translate_on
endmodule  // lwc

